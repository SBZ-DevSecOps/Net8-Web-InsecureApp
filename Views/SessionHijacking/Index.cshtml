@using InsecureAppWebNet8.ViewModels
@using InsecureAppWebNet8.Controllers
@model VulnerabilityViewModel<SessionHijackingResult>

@{
    ViewData["Title"] = "Session Hijacking - Broken Authentication";
}

<div class="container mt-4">
    <!-- Avertissement de sécurité -->
    <div class="alert alert-danger" role="alert">
        <i class="fas fa-exclamation-triangle"></i>
        <strong>DANGER :</strong> Ce module contient de vraies vulnérabilités de gestion de session détectables par les outils SAST.
        Sessions prévisibles, cookies non sécurisés, tokens faibles et plus !
    </div>

    <h2>A07:2021 - Identification and Authentication Failures (Session Hijacking)</h2>
    <p class="text-muted">Vulnérabilités permettant de voler ou usurper des sessions utilisateur</p>

    <!-- État des sessions -->
    <div class="alert alert-warning">
        <i class="fas fa-user-secret"></i> <strong>État de la sécurité :</strong>
        Sessions : <strong>PRÉVISIBLES</strong> | Cookies : <strong>NON PROTÉGÉS</strong> |
        Tokens : <strong>FAIBLES</strong> | Expiration : <strong>DÉSACTIVÉE</strong>
    </div>

    <!-- Formulaire principal -->
    <form asp-controller="SessionHijacking" asp-action="Index" method="post" class="mb-4">
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    <label for="attackType">Type d'attaque Session</label>
                    <select id="attackType" name="attackType" class="form-control">
                        <option value="">-- Sélectionnez un type --</option>
                        @foreach (var attackInfo in Model.AttackInfos)
                        {
                            var selected = Model.AttackType == attackInfo.Key;
                            <option value="@attackInfo.Key"
                                    data-payload-example="@attackInfo.Value.PayloadExample"
                                    data-risk-level="@attackInfo.Value.RiskLevel"
                                    selected="@selected">
                                @attackInfo.Key.ToUpper() - @attackInfo.Value.RiskLevel
                            </option>
                        }
                    </select>
                </div>

                <!-- Exemple de payload -->
                <div id="payloadExample" class="alert alert-secondary mt-2" style="display:none;">
                    <strong>Exemple :</strong><br />
                    <pre class="mb-0 mt-2" style="font-size: 0.85em;"><code id="payloadExampleContent"></code></pre>
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    <label for="payload">Payload / Paramètre</label>
                    <input type="text" id="payload" name="payload" class="form-control font-monospace"
                           value="@Model.Payload" placeholder="username ou session ID">
                    <small class="form-text text-muted">
                        Le payload sera automatiquement adapté selon votre sélection
                    </small>
                </div>

                <button type="submit" class="btn btn-danger mt-3">
                    <i class="fas fa-user-secret"></i> Analyser la vulnérabilité de session
                </button>
            </div>
        </div>
    </form>

    <!-- Description de l'attaque -->
    @if (!string.IsNullOrEmpty(Model.AttackType) && Model.AttackInfos.ContainsKey(Model.AttackType))
    {
        var attackInfo = Model.AttackInfos[Model.AttackType];
        var alertClass = attackInfo.RiskLevel.ToLower() switch
        {
            "critical" => "alert-danger",
            "high" => "alert-danger",
            "medium" => "alert-warning",
            _ => "alert-info"
        };

        <div class="@alertClass mt-4">
            <div class="d-flex align-items-start">
                <div class="me-3">
                    @if (attackInfo.RiskLevel == "Critical" || attackInfo.RiskLevel == "High")
                    {
                        <i class="fas fa-skull-crossbones text-danger fa-2x"></i>
                    }
                    else if (attackInfo.RiskLevel == "Medium")
                    {
                        <i class="fas fa-exclamation-triangle text-warning fa-2x"></i>
                    }
                    else
                    {
                        <i class="fas fa-info-circle text-info fa-2x"></i>
                    }
                </div>
                <div class="flex-grow-1">
                    <h5>@Model.AttackType.ToUpper() - @attackInfo.RiskLevel Risk</h5>
                    <p class="mb-2">@attackInfo.Description</p>
                    <div class="d-flex gap-2">
                        <a href="@attackInfo.LearnMoreUrl" target="_blank" class="btn btn-sm btn-outline-primary">
                            <i class="fas fa-external-link-alt"></i> En savoir plus
                        </a>
                        <span class="badge bg-@(attackInfo.RiskLevel.ToLower() == "critical" || attackInfo.RiskLevel.ToLower() == "high" ? "danger" : attackInfo.RiskLevel.ToLower() == "medium" ? "warning" : "info")">
                            Risque : @attackInfo.RiskLevel
                        </span>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Résultats -->
    @if (Model.Results?.Any() == true)
    {
        <div class="mt-4">
            <div class="alert alert-info">
                <h5><i class="fas fa-info-circle"></i> Instructions de test</h5>
                <p>Testez ces vulnérabilités de session directement :</p>

                @if (Model.AttackType == "predictable-id")
                {
                    <strong>Session IDs prévisibles :</strong>
                    <br />
                    <div class="session-form mt-3 p-3 border rounded">
                        <form id="predictableForm">
                            <div class="mb-3">
                                <label class="form-label">Username pour créer une session :</label>
                                <input type="text" class="form-control" id="predictableUsername"
                                       value="admin" placeholder="Username">
                                <small class="text-danger">Les IDs générés sont basés sur le timestamp!</small>
                            </div>
                            <button type="submit" class="btn btn-danger">
                                <i class="fas fa-dice-d20"></i> Générer session prévisible
                            </button>
                            <button type="button" class="btn btn-warning btn-sm" onclick="predictNextIds()">
                                <i class="fas fa-crystal-ball"></i> Prédire les prochains IDs
                            </button>
                        </form>
                    </div>
                }
                else if (Model.AttackType == "session-fixation")
                {
                    <strong>Session Fixation :</strong>
                    <br />
                    <div class="session-form mt-3 p-3 border rounded">
                        <form id="fixationForm">
                            <div class="row">
                                <div class="col-md-8">
                                    <input type="text" class="form-control" id="fixedSessionId"
                                           value="evil-session-123" placeholder="Session ID à forcer">
                                </div>
                                <div class="col-md-4">
                                    <input type="text" class="form-control" id="fixationUsername"
                                           value="victim" placeholder="Username">
                                </div>
                            </div>
                            <div class="mt-2">
                                <button type="submit" class="btn btn-danger">
                                    <i class="fas fa-link"></i> Fixer la session
                                </button>
                                <small class="text-muted ms-2">L'application accepte n'importe quel ID!</small>
                            </div>
                        </form>
                    </div>
                }
                else if (Model.AttackType == "exposed-tokens")
                {
                    <strong>Tokens exposés dans l'URL :</strong>
                    <br />
                    <div class="alert alert-secondary mt-2">
                        <p>Les tokens dans l'URL sont visibles dans :</p>
                        <ul>
                            <li>L'historique du navigateur</li>
                            <li>Les logs serveur</li>
                            <li>Le header HTTP Referer</li>
                            <li>Les proxies et caches</li>
                        </ul>
                    </div>
                    <button class="btn btn-danger" onclick="testExposedToken()">
                        <i class="fas fa-eye"></i> Créer et exposer un token
                    </button>
                }
                else if (Model.AttackType == "no-httponly")
                {
                    <strong>Cookies sans HttpOnly :</strong>
                    <br />
                    <div class="session-form mt-3 p-3 border rounded">
                        <form id="cookieForm">
                            <div class="row">
                                <div class="col-md-6">
                                    <input type="text" class="form-control" id="cookieName"
                                           value="auth_token" placeholder="Nom du cookie">
                                </div>
                                <div class="col-md-6">
                                    <input type="text" class="form-control" id="cookieValue"
                                           value="secret123" placeholder="Valeur">
                                </div>
                            </div>
                            <div class="mt-2">
                                <button type="submit" class="btn btn-danger">
                                    <i class="fas fa-cookie-bite"></i> Créer cookie vulnérable
                                </button>
                                <button type="button" class="btn btn-warning btn-sm" onclick="stealCookies()">
                                    <i class="fas fa-mask"></i> Voler via XSS
                                </button>
                            </div>
                        </form>
                    </div>
                }
                else if (Model.AttackType == "weak-tokens")
                {
                    <strong>Génération de tokens faibles :</strong>
                    <br />
                    <div class="session-form mt-3 p-3 border rounded">
                        <form id="weakTokenForm">
                            <div class="mb-3">
                                <label class="form-label">Seed pour génération :</label>
                                <input type="text" class="form-control" id="tokenSeed"
                                       value="user123" placeholder="Seed">
                                <small class="text-muted">MD5, SHA1, Base64, timestamp...</small>
                            </div>
                            <button type="submit" class="btn btn-danger">
                                <i class="fas fa-key"></i> Générer tokens faibles
                            </button>
                        </form>
                    </div>
                }
                else if (Model.AttackType == "no-timeout")
                {
                    <strong>Sessions sans expiration :</strong>
                    <br />
                    <div class="session-form mt-3 p-3 border rounded">
                        <form id="eternalForm">
                            <div class="mb-3">
                                <label class="form-label">Username pour session éternelle :</label>
                                <input type="text" class="form-control" id="eternalUsername"
                                       value="immortal" placeholder="Username">
                                <small class="text-danger">Cette session n'expirera JAMAIS!</small>
                            </div>
                            <button type="submit" class="btn btn-danger">
                                <i class="fas fa-infinity"></i> Créer session éternelle
                            </button>
                        </form>
                    </div>
                }
                else if (Model.AttackType == "jwt-none-alg")
                {
                    <strong>JWT avec algorithme 'none' :</strong>
                    <br />
                    <div class="session-form mt-3 p-3 border rounded">
                        <form id="jwtForm">
                            <div class="mb-3">
                                <label class="form-label">Username pour JWT :</label>
                                <input type="text" class="form-control" id="jwtUsername"
                                       value="hacker" placeholder="Username">
                                <small class="text-danger">Algorithme 'none' = pas de signature!</small>
                            </div>
                            <button type="submit" class="btn btn-danger">
                                <i class="fas fa-signature"></i> Créer JWT sans signature
                            </button>
                            <button type="button" class="btn btn-warning btn-sm" onclick="forgeJWT()">
                                <i class="fas fa-hammer"></i> Forger un JWT admin
                            </button>
                        </form>
                    </div>
                }
                else if (Model.AttackType == "session-replay")
                {
                    <strong>Session Replay (pas de blacklist) :</strong>
                    <br />
                    <div class="alert alert-secondary mt-2">
                        <p>Les tokens restent valides après déconnexion!</p>
                    </div>
                    <button class="btn btn-danger" onclick="testSessionReplay()">
                        <i class="fas fa-redo"></i> Tester session replay
                    </button>
                }
                else if (Model.AttackType == "concurrent-sessions")
                {
                    <strong>Sessions concurrentes illimitées :</strong>
                    <br />
                    <div class="session-form mt-3 p-3 border rounded">
                        <form id="concurrentForm">
                            <div class="mb-3">
                                <label class="form-label">Username pour sessions multiples :</label>
                                <input type="text" class="form-control" id="concurrentUsername"
                                       value="multiuser" placeholder="Username">
                            </div>
                            <button type="submit" class="btn btn-danger">
                                <i class="fas fa-clone"></i> Créer nouvelle session
                            </button>
                            <button type="button" class="btn btn-warning btn-sm" onclick="createManySessions()">
                                <i class="fas fa-layer-group"></i> Créer 10 sessions
                            </button>
                        </form>
                    </div>
                }

                <div class="mt-3">
                    <a href="/SessionHijacking/TestEndpoints" target="_blank" class="btn btn-info btn-sm">
                        <i class="fas fa-list"></i> Tous les endpoints
                    </a>
                    <button class="btn btn-warning btn-sm" onclick="viewAllSessions()">
                        <i class="fas fa-users"></i> Voir toutes les sessions
                    </button>
                </div>
            </div>

            <!-- Vulnérabilités détectables -->
            <div class="alert alert-warning mt-3">
                <h6><i class="fas fa-search"></i> Ce que les SAST vont détecter :</h6>
                <ul class="mb-0">
                    <li><strong>MD5/SHA1 pour tokens</strong> - Algorithmes cassés</li>
                    <li><strong>HttpOnly = false</strong> - Cookies accessibles via JS</li>
                    <li><strong>Secure = false</strong> - Transmission en clair</li>
                    <li><strong>SameSite = None</strong> - Vulnérable CSRF</li>
                    <li><strong>IDs séquentiels</strong> - Prévisibles</li>
                    <li><strong>JWT alg:'none'</strong> - Pas de signature</li>
                    <li><strong>Pas d'expiration</strong> - Sessions éternelles</li>
                    <li><strong>Tokens dans URLs</strong> - Information disclosure</li>
                </ul>
            </div>
        </div>
    }

    <!-- Zone de résultats -->
    <div class="mt-4" id="sessionResults" style="display:none;">
        <div class="card border-danger">
            <div class="card-header bg-danger text-white">
                <h6><i class="fas fa-user-secret"></i> Résultat Session Hijacking</h6>
            </div>
            <div class="card-body">
                <div id="sessionResultContent">
                    <!-- Rempli dynamiquement -->
                </div>
            </div>
        </div>
    </div>

    <!-- Cookie Monitor -->
    <div class="mt-4" id="cookieMonitor" style="display:none;">
        <div class="card border-warning">
            <div class="card-header bg-warning text-dark">
                <h6><i class="fas fa-cookie"></i> Cookie Monitor</h6>
            </div>
            <div class="card-body">
                <div id="cookieList">
                    <!-- Liste des cookies -->
                </div>
                <button class="btn btn-sm btn-primary mt-2" onclick="refreshCookies()">
                    <i class="fas fa-sync"></i> Rafraîchir
                </button>
            </div>
        </div>
    </div>

    <!-- Exemples de code vulnérable -->
    <div class="mt-4">
        <div class="card border-secondary">
            <div class="card-header bg-secondary text-white">
                <h6><i class="fas fa-code"></i> Patterns détectables par SAST</h6>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <h6>Session ID prévisible :</h6>
                        <pre class="small"><code>// VULNÉRABLE - Timestamp
var sessionId = DateTimeOffset.UtcNow
    .ToUnixTimeSeconds().ToString();

// VULNÉRABLE - MD5
var token = MD5.Create()
    .ComputeHash(bytes);</code></pre>

                        <h6>Cookie non sécurisé :</h6>
                        <pre class="small"><code>// VULNÉRABLE
Response.Cookies.Append("auth", token, new CookieOptions
{
    HttpOnly = false,  // XSS
    Secure = false,    // HTTP
    SameSite = SameSiteMode.None
});</code></pre>
                    </div>
                    <div class="col-md-6">
                        <h6>JWT 'none' algorithm :</h6>
                        <pre class="small"><code>// VULNÉRABLE
var header = new {
    alg = "none",  // Pas de signature!
    typ = "JWT"
};
// Token forgeable</code></pre>

                        <h6>Session sans expiration :</h6>
                        <pre class="small"><code>// VULNÉRABLE
new CookieOptions {
    MaxAge = TimeSpan.FromDays(365 * 10)
};
// Session éternelle</code></pre>
                    </div>
                </div>

                <div class="mt-3">
                    <strong>Outils qui détecteront ces failles :</strong>
                    <span class="badge bg-danger">Snyk</span>
                    <span class="badge bg-warning text-dark">SonarQube</span>
                    <span class="badge bg-info">Fortify</span>
                    <span class="badge bg-success">Checkmarx</span>
                    <span class="badge bg-secondary">Semgrep</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Techniques d'attaque -->
    <div class="mt-4">
        <div class="card border-warning">
            <div class="card-header bg-warning text-dark">
                <h6><i class="fas fa-tools"></i> Techniques de Session Hijacking</h6>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-4">
                        <h6>Prédiction :</h6>
                        <ul class="small">
                            <li>IDs séquentiels</li>
                            <li>Timestamp-based</li>
                            <li>Patterns simples</li>
                            <li>Entropie faible</li>
                        </ul>
                    </div>
                    <div class="col-md-4">
                        <h6>Vol de session :</h6>
                        <ul class="small">
                            <li>XSS → document.cookie</li>
                            <li>Network sniffing (HTTP)</li>
                            <li>Logs/historique</li>
                            <li>MITM attacks</li>
                        </ul>
                    </div>
                    <div class="col-md-4">
                        <h6>Exploitation :</h6>
                        <ul class="small">
                            <li>Session fixation</li>
                            <li>Session replay</li>
                            <li>JWT forgery</li>
                            <li>Cookie injection</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Prévention (non implémentée) -->
    <div class="mt-4">
        <div class="card border-info">
            <div class="card-header bg-info text-white">
                <h6><i class="fas fa-shield-alt"></i> Prévention (NON implémentée ici)</h6>
            </div>
            <div class="card-body">
                <p><strong>Note :</strong> Ces protections ne sont PAS implémentées pour permettre la détection SAST :</p>
                <ul class="mb-0">
                    <li><strong>IDs cryptographiquement sûrs</strong> : SecureRandom, CSPRNG</li>
                    <li><strong>HttpOnly + Secure</strong> : Protection XSS et HTTPS</li>
                    <li><strong>SameSite</strong> : Protection CSRF (Strict/Lax)</li>
                    <li><strong>Rotation de session</strong> : Nouveau ID après login</li>
                    <li><strong>Timeout approprié</strong> : Expiration après inactivité</li>
                    <li><strong>Token blacklist</strong> : Invalidation côté serveur</li>
                    <li><strong>Limite de sessions</strong> : Max concurrent sessions</li>
                    <li><strong>JWT sécurisé</strong> : RS256, pas 'none'</li>
                    <li><strong>Monitoring</strong> : Détection d'anomalies</li>
                </ul>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="~/css/session-hijacking.css" asp-append-version="true" />
}

@section Scripts {
    <!-- Données JSON sécurisées -->
    <script type="application/json" id="attackInfosData">
        @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.AttackInfos, new System.Text.Json.JsonSerializerOptions { PropertyNamingPolicy = null }))
    </script>

    <!-- Données pour le JavaScript -->
    <script>
        window.sessionData = {
            hasResults: @Json.Serialize(Model.Results?.Any() == true),
            hasError: @Json.Serialize(!string.IsNullOrEmpty(Model.ErrorMessage)),
            attackType: @Json.Serialize(Model.AttackType ?? ""),
            payload: @Json.Serialize(Model.Payload ?? "")
        };
    </script>

    <!-- Scripts externes -->
    <script src="~/js/vulnerability-common.js"></script>
    <script src="~/js/session-hijacking.js"></script>
}