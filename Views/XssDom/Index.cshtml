@using InsecureAppWebNet8.ViewModels
@using InsecureAppWebNet8.Controllers
@model VulnerabilityViewModel<XssDomResult>

@{
    ViewData["Title"] = "XSS DOM-Based Vulnerabilities";
}

<div class="container mt-4">
    <!-- Avertissement de sécurité -->
    <div class="alert alert-danger" role="alert">
        <i class="fas fa-exclamation-triangle"></i>
        <strong>DANGER :</strong> Ce module contient de vraies vulnérabilités XSS DOM-Based détectables par les outils SAST.
        Les payloads sont exécutés directement dans le navigateur !
    </div>

    <h2>XSS DOM-Based Vulnerabilities</h2>
    <p class="text-muted">Injection de scripts côté client via manipulation DOM non sécurisée</p>

    <!-- État du système -->
    <div class="alert alert-warning">
        <i class="fas fa-code"></i> <strong>Méthodes dangereuses :</strong>
        innerHTML | document.write() | eval() | jQuery.html() | Sans Content-Security-Policy
    </div>

    <!-- Formulaire principal simplifié -->
    <form asp-controller="XssDom" asp-action="Index" method="post" class="mb-4">
        <div class="row">
            <div class="col-md-6">
                <div class="form-group mb-3">
                    <label for="attackType" class="form-label">Type de vulnérabilité XSS DOM</label>
                    <select id="attackType" name="attackType" class="form-control">
                        <option value="">-- Sélectionnez un type --</option>
                        @foreach (var attackInfo in Model.AttackInfos)
                        {
                            var selected = Model.AttackType == attackInfo.Key ? "selected" : "";
                            <option value="@attackInfo.Key" 
                                    data-payload="@Html.Encode(attackInfo.Value.PayloadExample)"
                                    data-risk="@attackInfo.Value.RiskLevel" selected="@selected">
                                @attackInfo.Key.ToUpper() - @attackInfo.Value.RiskLevel
                            </option>
                        }
                    </select>
                </div>

                <!-- Exemple de payload -->
                <div id="payloadExample" class="alert alert-secondary mt-2" style="display:none;">
                    <strong>Exemple :</strong><br />
                    <pre class="mb-0 mt-2" style="font-size: 0.85em;"><code id="payloadExampleContent"></code></pre>
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group mb-3">
                    <label for="payload" class="form-label">Payload XSS</label>
                    <input type="text" id="payload" name="payload" class="form-control font-monospace"
                           value="@Model.Payload" placeholder="<img src=x onerror=alert('XSS')>">
                    <small class="form-text text-muted">
                        Le payload sera injecté dans le DOM sans échappement
                    </small>
                </div>

                <button type="submit" class="btn btn-danger">
                    <i class="fas fa-bug"></i> Injecter le payload
                </button>
            </div>
        </div>
    </form>

    <!-- Payloads prédéfinis simplifiés -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-warning">
                <div class="card-header bg-warning text-dark">
                    <h6><i class="fas fa-bomb"></i> Payloads Prédéfinis</h6>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <h6>Basiques :</h6>
                            <button class="btn btn-sm btn-outline-danger mb-2 w-100" onclick="setPayload('<img src=x onerror=alert(&quot;XSS&quot;)>')">Basic IMG</button>
                            <button class="btn btn-sm btn-outline-danger mb-2 w-100" onclick="setPayload('<script>alert(&quot;XSS&quot;)</script>')">Script Tag</button>
                            <button class="btn btn-sm btn-outline-danger mb-2 w-100" onclick="setPayload('<svg/onload=alert(&quot;XSS&quot;)>')">SVG OnLoad</button>
                        </div>
                        <div class="col-md-3">
                            <h6>Encodés :</h6>
                            <button class="btn btn-sm btn-outline-warning mb-2 w-100" onclick="setPayload('&#60;script&#62;alert(1)&#60;/script&#62;')">HTML Entities</button>
                            <button class="btn btn-sm btn-outline-warning mb-2 w-100" onclick="setPayload('%3Cscript%3Ealert(1)%3C/script%3E')">URL Encoded</button>
                            <button class="btn btn-sm btn-outline-warning mb-2 w-100" onclick="setPayload('eval(atob(&quot;YWxlcnQoMSk=&quot;))')">Base64</button>
                        </div>
                        <div class="col-md-3">
                            <h6>Avancés :</h6>
                            <button class="btn btn-sm btn-outline-info mb-2 w-100" onclick="setPayload('javascript:alert(&quot;XSS&quot;)')">JavaScript URI</button>
                            <button class="btn btn-sm btn-outline-info mb-2 w-100" onclick="setPayload('data:text/html,<script>alert(1)</script>')">Data URI</button>
                            <button class="btn btn-sm btn-outline-info mb-2 w-100" onclick="setPayload('String.fromCharCode(97,108,101,114,116,40,49,41)')">Char Codes</button>
                        </div>
                        <div class="col-md-3">
                            <h6>mXSS :</h6>
                            <button class="btn btn-sm btn-outline-dark mb-2 w-100" onclick="setPayload('<noscript><p title=&quot;</noscript><img src=x onerror=alert(1)>&quot;>')">noscript</button>
                            <button class="btn btn-sm btn-outline-dark mb-2 w-100" onclick="setPayload('<template><script>alert(1)</script></template>')">template</button>
                            <button class="btn btn-sm btn-outline-dark mb-2 w-100" onclick="setPayload('alert`1`')">Template Literal</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Zone de test direct -->
    @if (Model.Results?.Any() == true || !string.IsNullOrEmpty(Model.AttackType))
    {
        <div class="alert alert-info">
            <h5><i class="fas fa-flask"></i> Zone de Test Direct</h5>
            <p>Testez les vulnérabilités XSS DOM ici :</p>

            <div class="row">
                <div class="col-md-6">
                    <div class="card border-danger">
                        <div class="card-header bg-danger text-white">
                            <h6>innerHTML Test</h6>
                        </div>
                        <div class="card-body">
                            <input type="text" id="innerHtmlInput" class="form-control mb-2" 
                                   value="&lt;img src=x onerror=alert('innerHTML-XSS')&gt;" />
                            <button class="btn btn-danger btn-sm" onclick="testInnerHtml()">
                                Test innerHTML
                            </button>
                            <div id="innerHtmlOutput" class="mt-2 p-2 border rounded xss-demo">
                                <!-- Résultat innerHTML ici -->
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="card border-warning">
                        <div class="card-header bg-warning text-dark">
                            <h6>document.write Test</h6>
                        </div>
                        <div class="card-body">
                            <input type="text" id="docWriteInput" class="form-control mb-2" 
                                   value="&lt;script&gt;alert('docWrite-XSS')&lt;/script&gt;" />
                            <button class="btn btn-warning btn-sm" onclick="testDocumentWrite()">
                                Test document.write
                            </button>
                            <div id="docWriteOutput" class="mt-2">
                                <!-- iframe sera créé ici -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row mt-3">
                <div class="col-md-6">
                    <div class="card border-info">
                        <div class="card-header bg-info text-white">
                            <h6>eval() Test</h6>
                        </div>
                        <div class="card-body">
                            <input type="text" id="evalInput" class="form-control mb-2" 
                                   value="alert('eval-XSS')" />
                            <button class="btn btn-info btn-sm" onclick="testEval()">
                                Test eval()
                            </button>
                            <div id="evalOutput" class="mt-2 p-2 border rounded">
                                Résultat: <span id="evalResult"></span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="card border-secondary">
                        <div class="card-header bg-secondary text-white">
                            <h6>jQuery .html() Test</h6>
                        </div>
                        <div class="card-body">
                            <input type="text" id="jqueryInput" class="form-control mb-2" 
                                   value="&lt;img src=x onerror=alert('jQuery-XSS')&gt;" />
                            <button class="btn btn-secondary btn-sm" onclick="testJquery()">
                                Test jQuery
                            </button>
                            <div id="jqueryOutput" class="mt-2 p-2 border rounded">
                                <!-- Résultat jQuery ici -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Description de l'attaque -->
    @if (!string.IsNullOrEmpty(Model.AttackType) && Model.AttackInfos.ContainsKey(Model.AttackType))
    {
        var attackInfo = Model.AttackInfos[Model.AttackType];
        var alertClass = attackInfo.RiskLevel.ToLower() switch
        {
            "critical" => "alert-danger",
            "high" => "alert-danger", 
            "medium" => "alert-warning",
            _ => "alert-info"
        };

        <div class="@alertClass">
            <div class="d-flex align-items-start">
                <div class="me-3">
                    @if (attackInfo.RiskLevel == "Critical" || attackInfo.RiskLevel == "High")
                    {
                        <i class="fas fa-skull-crossbones text-danger fa-2x"></i>
                    }
                    else if (attackInfo.RiskLevel == "Medium")
                    {
                        <i class="fas fa-exclamation-triangle text-warning fa-2x"></i>
                    }
                    else
                    {
                        <i class="fas fa-info-circle text-info fa-2x"></i>
                    }
                </div>
                <div class="flex-grow-1">
                    <h5>@Model.AttackType.ToUpper() - @attackInfo.RiskLevel Risk</h5>
                    <p class="mb-2">@attackInfo.Description</p>
                    <div class="d-flex gap-2">
                        <a href="@attackInfo.LearnMoreUrl" target="_blank" class="btn btn-sm btn-outline-primary">
                            <i class="fas fa-external-link-alt"></i> En savoir plus
                        </a>
                        <span class="badge bg-@(attackInfo.RiskLevel.ToLower() == "critical" || attackInfo.RiskLevel.ToLower() == "high" ? "danger" : attackInfo.RiskLevel.ToLower() == "medium" ? "warning" : "info")">
                            Risque : @attackInfo.RiskLevel
                        </span>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Patterns détectables par SAST -->
    <div class="card border-secondary mt-4">
        <div class="card-header bg-dark text-white">
            <h6><i class="fas fa-search"></i> Patterns détectables par SAST</h6>
        </div>
        <div class="card-body" style="background-color: white !important;">
            <div class="row">
                <div class="col-md-6">
                    <h6 style="color: #212529 !important;">innerHTML vulnérable :</h6>
                    <pre style="background-color: #f8f9fa !important; color: #212529 !important; border: 1px solid #dee2e6 !important;"><code style="color: #212529 !important;">// VULNÉRABLE
element.innerHTML = userInput;
// VULNÉRABLE  
$('#output').html(data);</code></pre>

                    <h6 style="color: #212529 !important;">document.write dangereux :</h6>
                    <pre style="background-color: #f8f9fa !important; color: #212529 !important; border: 1px solid #dee2e6 !important;"><code style="color: #212529 !important;">// VULNÉRABLE
document.write(userContent);
// VULNÉRABLE
document.writeln(input);</code></pre>
                </div>
                <div class="col-md-6">
                    <h6 style="color: #212529 !important;">eval() et équivalents :</h6>
                    <pre style="background-color: #f8f9fa !important; color: #212529 !important; border: 1px solid #dee2e6 !important;"><code style="color: #212529 !important;">// VULNÉRABLE
eval(userCode);
// VULNÉRABLE
new Function(code)();
// VULNÉRABLE
setTimeout(userInput, 0);</code></pre>

                    <h6 style="color: #212529 !important;">Encodage et contournement :</h6>
                    <pre style="background-color: #f8f9fa !important; color: #212529 !important; border: 1px solid #dee2e6 !important;"><code style="color: #212529 !important;">// VULNÉRABLE
atob(userInput);
// VULNÉRABLE
String.fromCharCode(...codes);
// VULNÉRABLE
decodeURIComponent(input);</code></pre>
                </div>
            </div>

            <div class="mt-3">
                <strong style="color: #212529 !important;">Outils qui détecteront ces failles :</strong>
                <span class="badge bg-danger">Snyk</span>
                <span class="badge bg-warning text-dark">SonarQube</span>
                <span class="badge bg-info">Semgrep</span>
                <span class="badge bg-success">ESLint Security</span>
                <span class="badge bg-secondary">Burp Suite</span>
                <span class="badge bg-primary">CodeQL</span>
            </div>
        </div>
    </div>

    <!-- Liste des commentaires -->
    <div class="mt-4">
        <div class="card">
            <div class="card-header">
                <h6><i class="fas fa-comments"></i> Commentaires (vulnérables)</h6>
            </div>
            <div class="card-body" id="commentsList">
                <!-- Les commentaires seront chargés ici -->
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="~/css/xss-dom.css" asp-append-version="true" />
}

@section Scripts {
    <!-- Scripts externes -->
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/js/vulnerability-common.js"></script>

    <script type="text/javascript">
        // Variables globales
        window.serverComments = "@Html.Raw(ViewBag.CommentsJson ?? "[]")"
        window.userData = "@Html.Raw(ViewBag.UserData ?? "{}")";
        
        @if (ViewBag.UnsafePayload != null)
        {
            <text>window.serverPayload = '@Html.Raw(ViewBag.UnsafePayload)';</text>
        }

        window.xssDomData = {
            hasResults: @Json.Serialize(Model.Results?.Any() == true),
            attackType: @Json.Serialize(Model.AttackType ?? ""),
            payload: @Json.Serialize(Model.Payload ?? "")
        };
    </script>

    <script type="text/javascript">
        // Fonctions XSS
        function setPayload(payload) {
            var input = document.getElementById('payload');
            if (input) {
                input.value = payload;
                showNotification('info', 'Payload défini');
            }
        }

        function testInnerHtml() {
            var input = document.getElementById('innerHtmlInput');
            var output = document.getElementById('innerHtmlOutput');
            if (input && output) {
                output.innerHTML = 'Résultat: ' + input.value;
                showNotification('danger', 'innerHTML exécuté!');
            }
        }

        function testDocumentWrite() {
            var input = document.getElementById('docWriteInput');
            var output = document.getElementById('docWriteOutput');
            if (input && output) {
                var iframe = document.createElement('iframe');
                iframe.style.width = '100%';
                iframe.style.height = '100px';
                iframe.style.border = '1px solid #dc3545';
                
                output.innerHTML = '';
                output.appendChild(iframe);
                
                var doc = iframe.contentDocument || iframe.contentWindow.document;
                doc.open();
                doc.write('<html><body>' + input.value + '</body></html>');
                doc.close();
                
                showNotification('danger', 'document.write exécuté!');
            }
        }

        function testEval() {
            var input = document.getElementById('evalInput');
            var result = document.getElementById('evalResult');
            if (input && result) {
                try {
                    var evalResult = eval(input.value);
                    result.textContent = String(evalResult);
                    showNotification('danger', 'eval() exécuté!');
                } catch (e) {
                    result.textContent = 'Erreur: ' + e.message;
                    showNotification('error', 'Erreur eval: ' + e.message);
                }
            }
        }

        function testJquery() {
            var input = document.getElementById('jqueryInput');
            var output = $('#jqueryOutput');
            if (input && output.length) {
                output.html('Résultat jQuery: ' + input.value);
                showNotification('danger', 'jQuery .html() exécuté!');
            }
        }

        function loadComments() {
            var commentsList = document.getElementById('commentsList');
            if (commentsList && window.serverComments) {
                var html = '';
                for (var i = 0; i < window.serverComments.length; i++) {
                    var comment = window.serverComments[i];
                    html += '<div class="comment border-bottom pb-2 mb-2">';
                    html += '<strong>' + comment.Author + '</strong>';
                    html += '<small class="text-muted ms-2">' + comment.CreatedAt + '</small>';
                    html += '<p class="mb-0">' + comment.Content + '</p>';
                    html += '</div>';
                }
                commentsList.innerHTML = html;
            }
        }

        function showNotification(type, message) {
            var alertDiv = document.createElement('div');
            alertDiv.className = 'alert alert-' + (type === 'error' ? 'danger' : type) + ' alert-dismissible fade show position-fixed';
            alertDiv.style.cssText = 'top:20px;right:20px;z-index:9999;min-width:300px;';
            
            var icon = 'info-circle';
            if (type === 'danger') icon = 'bug';
            if (type === 'warning') icon = 'exclamation-triangle';
            
            alertDiv.innerHTML = '<i class="fas fa-' + icon + '"></i> ' + message + 
                '<button type="button" class="btn-close" data-bs-dismiss="alert"></button>';
            
            document.body.appendChild(alertDiv);
            
            setTimeout(function() {
                if (alertDiv.parentNode) {
                    alertDiv.remove();
                }
            }, 5000);
        }

        // Initialisation au chargement
        document.addEventListener('DOMContentLoaded', function() {
            var attackSelect = document.getElementById('attackType');
            var payloadExample = document.getElementById('payloadExample');
            var payloadContent = document.getElementById('payloadExampleContent');
            var payloadInput = document.getElementById('payload');

            if (attackSelect) {
                attackSelect.addEventListener('change', function() {
                    var selectedOption = this.options[this.selectedIndex];
                    var payload = selectedOption.getAttribute('data-payload');
                    
                    if (payload && this.value) {
                        if (payloadContent) {
                            payloadContent.textContent = payload;
                        }
                        if (payloadExample) {
                            payloadExample.style.display = 'block';
                        }
                        if (payloadInput && !payloadInput.value) {
                            payloadInput.value = payload;
                        }
                    } else {
                        if (payloadExample) {
                            payloadExample.style.display = 'none';
                        }
                    }
                });

                // Trigger initial si on a déjà une sélection
                if (attackSelect.value) {
                    var event = new Event('change');
                    attackSelect.dispatchEvent(event);
                }
            }

            // Charger les commentaires
            loadComments();
        });
    </script>
}