@using InsecureAppWebNet8.ViewModels
@using InsecureAppWebNet8.Controllers
@model VulnerabilityViewModel<FileUploadResult>

@{
    ViewData["Title"] = "File Upload Vulnerabilities";
}

<div class="container mt-4">
    <!-- Avertissement de sécurité -->
    <div class="alert alert-danger" role="alert">
        <i class="fas fa-exclamation-triangle"></i>
        <strong>DANGER :</strong> Ce module contient de vraies vulnérabilités d'upload de fichiers détectables par les outils SAST.
        Les fichiers peuvent être uploadés sans validation et exécutés sur le serveur !
    </div>

    <h2>File Upload Vulnerabilities</h2>
    <p class="text-muted">Upload de fichiers sans validation appropriée permettant RCE, path traversal et DoS</p>

    <!-- État du serveur -->
    <div class="alert alert-warning">
        <i class="fas fa-server"></i> <strong>Configuration serveur :</strong>
        Upload max : <strong>2GB</strong> | Extensions : <strong>TOUTES</strong> | Validation : <strong>AUCUNE</strong> |
        Répertoire : <strong>/wwwroot/uploads/</strong> (accessible web!)
    </div>

    <!-- Formulaire principal -->
    <form asp-controller="FileUpload" asp-action="Index" method="post" class="mb-4">
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    <label for="attackType">Type de vulnérabilité d'upload</label>
                    <select id="attackType" name="attackType" class="form-control">
                        <option value="">-- Sélectionnez un type --</option>
                        @foreach (var attackInfo in Model.AttackInfos)
                        {
                            var selected = Model.AttackType == attackInfo.Key;
                            <option value="@attackInfo.Key"
                                    data-payload-example="@attackInfo.Value.PayloadExample"
                                    data-risk-level="@attackInfo.Value.RiskLevel"
                                    selected="@selected">
                                @attackInfo.Key.ToUpper() - @attackInfo.Value.RiskLevel
                            </option>
                        }
                    </select>
                </div>

                <!-- Exemple de payload -->
                <div id="payloadExample" class="alert alert-secondary mt-2" style="display:none;">
                    <strong>Exemple :</strong><br />
                    <pre class="mb-0 mt-2" style="font-size: 0.85em;"><code id="payloadExampleContent"></code></pre>
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    <label for="payload">Type de fichier / Payload</label>
                    <input type="text" id="payload" name="payload" class="form-control font-monospace"
                           value="@Model.Payload" placeholder="shell.aspx">
                    <small class="form-text text-muted">
                        Le type de fichier sera automatiquement rempli selon votre sélection
                    </small>
                </div>

                <button type="submit" class="btn btn-danger mt-3">
                    <i class="fas fa-upload"></i> Analyser la vulnérabilité
                </button>
            </div>
        </div>
    </form>

    <!-- Description de l'attaque -->
    @if (!string.IsNullOrEmpty(Model.AttackType) && Model.AttackInfos.ContainsKey(Model.AttackType))
    {
        var attackInfo = Model.AttackInfos[Model.AttackType];
        var alertClass = attackInfo.RiskLevel.ToLower() switch
        {
            "critical" => "alert-danger",
            "high" => "alert-danger",
            "medium" => "alert-warning",
            _ => "alert-info"
        };

        <div class="@alertClass mt-4">
            <div class="d-flex align-items-start">
                <div class="me-3">
                    @if (attackInfo.RiskLevel == "Critical" || attackInfo.RiskLevel == "High")
                    {
                        <i class="fas fa-skull-crossbones text-danger fa-2x"></i>
                    }
                    else if (attackInfo.RiskLevel == "Medium")
                    {
                        <i class="fas fa-exclamation-triangle text-warning fa-2x"></i>
                    }
                    else
                    {
                        <i class="fas fa-info-circle text-info fa-2x"></i>
                    }
                </div>
                <div class="flex-grow-1">
                    <h5>@Model.AttackType.ToUpper() - @attackInfo.RiskLevel Risk</h5>
                    <p class="mb-2">@attackInfo.Description</p>
                    <div class="d-flex gap-2">
                        <a href="@attackInfo.LearnMoreUrl" target="_blank" class="btn btn-sm btn-outline-primary">
                            <i class="fas fa-external-link-alt"></i> En savoir plus
                        </a>
                        <span class="badge bg-@(attackInfo.RiskLevel.ToLower() == "critical" || attackInfo.RiskLevel.ToLower() == "high" ? "danger" : attackInfo.RiskLevel.ToLower() == "medium" ? "warning" : "info")">
                            Risque : @attackInfo.RiskLevel
                        </span>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Résultats -->
    @if (Model.Results?.Any() == true)
    {
        <div class="mt-4">
            <div class="alert alert-info">
                <h5><i class="fas fa-info-circle"></i> Instructions de test</h5>
                <p>Testez ces vulnérabilités d'upload directement :</p>

                @if (Model.AttackType == "no-validation")
                {
                    <strong>Upload sans aucune validation :</strong>
                    <br />
                    <div class="upload-form mt-3 p-3 border rounded">
                        <form id="noValidationForm" enctype="multipart/form-data">
                            <div class="mb-3">
                                <label class="form-label">Uploader N'IMPORTE QUEL fichier :</label>
                                <input type="file" class="form-control" id="anyFile" name="file" accept="*/*">
                                <small class="text-danger">Accepte .exe, .aspx, .php, virus, etc.</small>
                            </div>
                            <button type="submit" class="btn btn-danger">
                                <i class="fas fa-virus"></i> Upload sans validation
                            </button>
                        </form>
                    </div>
                }
                else if (Model.AttackType == "path-traversal")
                {
                    <strong>Path traversal dans le nom de fichier :</strong>
                    <br />
                    <div class="upload-form mt-3 p-3 border rounded">
                        <form id="pathTraversalForm" enctype="multipart/form-data">
                            <div class="mb-3">
                                <label class="form-label">Fichier :</label>
                                <input type="file" class="form-control" id="pathFile" name="file">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Chemin personnalisé (path traversal) :</label>
                                <input type="text" class="form-control" id="customPath" name="customPath"
                                       value="../../wwwroot/hacked.txt" placeholder="../../etc/passwd">
                                <small class="text-danger">Utilisez ../ pour sortir du dossier uploads!</small>
                            </div>
                            <button type="submit" class="btn btn-danger">
                                <i class="fas fa-folder-open"></i> Upload avec path traversal
                            </button>
                        </form>
                    </div>
                }
                else if (Model.AttackType == "executable-upload")
                {
                    <strong>Upload de fichiers exécutables :</strong>
                    <br />
                    <div class="upload-form mt-3 p-3 border rounded">
                        <form id="executableForm" enctype="multipart/form-data">
                            <div class="mb-3">
                                <label class="form-label">Uploader un fichier exécutable :</label>
                                <input type="file" class="form-control" id="execFile" name="file"
                                       accept=".aspx,.php,.exe,.bat,.ps1,.jsp">
                                <small class="text-danger">Les fichiers seront accessibles et exécutables!</small>
                            </div>
                            <button type="submit" class="btn btn-danger">
                                <i class="fas fa-skull-crossbones"></i> Upload exécutable
                            </button>
                        </form>
                        <div class="mt-2">
                            <strong>Exemples de web shells :</strong>
                            <ul>
                                <li><code>shell.aspx</code> - Web shell ASP.NET</li>
                                <li><code>cmd.php</code> - PHP command execution</li>
                                <li><code>reverse.jsp</code> - JSP reverse shell</li>
                            </ul>
                        </div>
                    </div>
                }
                else if (Model.AttackType == "mime-bypass")
                {
                    <strong>Contournement de validation MIME :</strong>
                    <br />
                    <div class="upload-form mt-3 p-3 border rounded">
                        <form id="mimeBypassForm" enctype="multipart/form-data">
                            <div class="mb-3">
                                <label class="form-label">Fichier avec faux MIME type :</label>
                                <input type="file" class="form-control" id="mimeFile" name="file">
                                <small class="text-muted">Le serveur vérifie seulement le Content-Type header</small>
                            </div>
                            <div class="mb-3">
                                <button type="button" class="btn btn-warning btn-sm" onclick="spoofMimeType()">
                                    <i class="fas fa-mask"></i> Forcer Content-Type: image/jpeg
                                </button>
                            </div>
                            <button type="submit" class="btn btn-danger">
                                <i class="fas fa-image"></i> Upload avec MIME falsifié
                            </button>
                        </form>
                    </div>
                }
                else if (Model.AttackType == "dos-large-file")
                {
                    <strong>DoS par fichier volumineux :</strong>
                    <br />
                    <div class="alert alert-warning mt-2">
                        <i class="fas fa-exclamation-triangle"></i> Limite : 2GB ! Peut saturer le disque !
                    </div>
                    <div class="upload-form mt-3 p-3 border rounded">
                        <form id="largeFileForm" enctype="multipart/form-data">
                            <div class="mb-3">
                                <label class="form-label">Fichier volumineux (jusqu'à 2GB) :</label>
                                <input type="file" class="form-control" id="largeFile" name="file">
                            </div>
                            <button type="submit" class="btn btn-danger">
                                <i class="fas fa-bomb"></i> Upload fichier énorme
                            </button>
                        </form>
                    </div>
                }
                else if (Model.AttackType == "double-extension")
                {
                    <strong>Double extension pour contourner les filtres :</strong>
                    <br />
                    <div class="upload-form mt-3 p-3 border rounded">
                        <form id="doubleExtForm" enctype="multipart/form-data">
                            <div class="mb-3">
                                <label class="form-label">Fichier avec double extension :</label>
                                <input type="file" class="form-control" id="doubleExtFile" name="file">
                                <small class="text-danger">Renommez votre fichier en : shell.jpg.aspx</small>
                            </div>
                            <button type="submit" class="btn btn-danger">
                                <i class="fas fa-layer-group"></i> Upload double extension
                            </button>
                        </form>
                        <div class="mt-2">
                            <strong>Exemples qui passent :</strong>
                            <code>malware.pdf.exe</code>, <code>script.jpg.php</code>
                        </div>
                    </div>
                }

                <div class="mt-3">
                    <a href="/FileUpload/ListUploads" target="_blank" class="btn btn-info btn-sm">
                        <i class="fas fa-list"></i> Voir les fichiers uploadés
                    </a>
                    <a href="/FileUpload/TestEndpoints" target="_blank" class="btn btn-secondary btn-sm">
                        <i class="fas fa-vial"></i> Tous les endpoints
                    </a>
                </div>
            </div>

            <!-- Vulnérabilités détectables -->
            <div class="alert alert-warning mt-3">
                <h6><i class="fas fa-search"></i> Ce que les SAST vont détecter :</h6>
                <ul class="mb-0">
                    <li><strong>No file type validation</strong> - Accepte tous les types</li>
                    <li><strong>Path.Combine() avec entrée utilisateur</strong> - Path traversal</li>
                    <li><strong>Files in wwwroot</strong> - Fichiers exécutables accessibles</li>
                    <li><strong>ContentType trust</strong> - Se fie au MIME du client</li>
                    <li><strong>No file size limit</strong> - DoS possible</li>
                    <li><strong>Dangerous file extensions</strong> - .aspx, .php, .exe</li>
                    <li><strong>Direct file serving</strong> - Pas de contrôle d'accès</li>
                </ul>
            </div>
        </div>
    }

    <!-- Exemples de code vulnérable -->
    <div class="mt-4">
        <div class="card border-secondary">
            <div class="card-header bg-secondary text-white">
                <h6><i class="fas fa-code"></i> Patterns détectables par SAST</h6>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <h6>Pas de validation :</h6>
                        <pre class="small"><code>// VULNÉRABLE - Aucune validation
var fileName = file.FileName;
var path = Path.Combine(uploadPath, fileName);
await file.CopyToAsync(stream);</code></pre>

                        <h6>Path traversal :</h6>
                        <pre class="small"><code>// VULNÉRABLE - Path traversal
var path = Path.Combine(basePath, userInput);
// Pas de vérification du chemin final</code></pre>
                    </div>
                    <div class="col-md-6">
                        <h6>MIME type trust :</h6>
                        <pre class="small"><code>// VULNÉRABLE - Trust Content-Type
if (file.ContentType == "image/jpeg") {
    // Le client peut mentir!
}</code></pre>

                        <h6>Fichiers dans wwwroot :</h6>
                        <pre class="small"><code>// VULNÉRABLE - Accessible web
var path = Path.Combine(
    _env.WebRootPath, "uploads", file.FileName
);</code></pre>
                    </div>
                </div>

                <div class="mt-3">
                    <strong>Outils qui détecteront ces failles :</strong>
                    <span class="badge bg-danger">Snyk</span>
                    <span class="badge bg-warning text-dark">SonarQube</span>
                    <span class="badge bg-info">Fortify</span>
                    <span class="badge bg-success">Checkmarx</span>
                    <span class="badge bg-secondary">Semgrep</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Zone de résultats d'upload -->
    <div class="mt-4" id="uploadResults" style="display:none;">
        <div class="card border-danger">
            <div class="card-header bg-danger text-white">
                <h6><i class="fas fa-file-upload"></i> Résultat de l'upload</h6>
            </div>
            <div class="card-body" id="uploadResultContent">
                <!-- Rempli dynamiquement -->
            </div>
        </div>
    </div>

    <!-- Prévention (non implémentée) -->
    <div class="mt-4">
        <div class="card border-info">
            <div class="card-header bg-info text-white">
                <h6><i class="fas fa-shield-alt"></i> Prévention (NON implémentée ici)</h6>
            </div>
            <div class="card-body">
                <p><strong>Note :</strong> Ces protections ne sont PAS implémentées pour permettre la détection SAST :</p>
                <ul class="mb-0">
                    <li><strong>Whitelist d'extensions</strong> : Seulement .jpg, .png, .pdf</li>
                    <li><strong>Validation du contenu</strong> : Magic numbers, pas juste MIME</li>
                    <li><strong>Renommage des fichiers</strong> : GUID au lieu du nom original</li>
                    <li><strong>Stockage hors wwwroot</strong> : Servir via contrôleur</li>
                    <li><strong>Limite de taille</strong> : Max 10MB par fichier</li>
                    <li><strong>Scan antivirus</strong> : Avant de sauvegarder</li>
                    <li><strong>Sanitisation des noms</strong> : Supprimer ../ et caractères spéciaux</li>
                    <li><strong>Permissions d'exécution</strong> : Désactiver sur le dossier uploads</li>
                </ul>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="~/css/file-upload.css" asp-append-version="true" />
}

@section Scripts {
    <!-- Données JSON sécurisées -->
    <script type="application/json" id="attackInfosData">
        @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.AttackInfos, new System.Text.Json.JsonSerializerOptions { PropertyNamingPolicy = null }))
    </script>

    <!-- Données pour le JavaScript -->
    <script>
        window.fileUploadData = {
            hasResults: @Json.Serialize(Model.Results?.Any() == true),
            hasError: @Json.Serialize(!string.IsNullOrEmpty(Model.ErrorMessage)),
            attackType: @Json.Serialize(Model.AttackType ?? ""),
            payload: @Json.Serialize(Model.Payload ?? "")
        };
    </script>

    <!-- Scripts externes -->
    <script src="~/js/vulnerability-common.js"></script>
    <script src="~/js/file-upload.js"></script>
}