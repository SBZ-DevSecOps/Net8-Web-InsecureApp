@using InsecureAppWebNet8.ViewModels
@using InsecureAppWebNet8.Controllers
@model VulnerabilityViewModel<MisconfigurationResult>

@{
    ViewData["Title"] = "Security Misconfiguration";
}

<div class="container mt-4">
    <!-- Avertissement de sécurité -->
    <div class="alert alert-danger" role="alert">
        <i class="fas fa-exclamation-triangle"></i>
        <strong>DANGER :</strong> Ce module contient de vraies mauvaises configurations de sécurité détectables par les outils SAST.
        Security Misconfiguration est la vulnérabilité #5 du OWASP Top 10 2021. Ne jamais déployer en production !
    </div>

    <h2>A05:2021 - Security Misconfiguration</h2>
    <p class="text-muted">Mauvaises configurations de sécurité exposant l'application à des risques</p>

    <!-- État de configuration actuel -->
    <div class="alert alert-warning">
        <i class="fas fa-cog"></i> <strong>Configuration actuelle :</strong>
        Mode <strong>DEBUG</strong> activé | CORS: <strong>*</strong> | XXE: <strong>Activé</strong> | Crypto: <strong>MD5/DES</strong>
    </div>

    <!-- Formulaire principal -->
    <form asp-controller="SecurityMisconfiguration" asp-action="Index" method="post" class="mb-4">
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    <label for="attackType">Type de mauvaise configuration</label>
                    <select id="attackType" name="attackType" class="form-control">
                        <option value="">-- Sélectionnez un type --</option>
                        @foreach (var attackInfo in Model.AttackInfos)
                        {
                            var selected = Model.AttackType == attackInfo.Key;
                            <option value="@attackInfo.Key"
                                    data-payload-example="@attackInfo.Value.PayloadExample"
                                    data-risk-level="@attackInfo.Value.RiskLevel"
                                    selected="@selected">
                                @attackInfo.Key.ToUpper() - @attackInfo.Value.RiskLevel
                            </option>
                        }
                    </select>
                </div>

                <!-- Exemple de payload -->
                <div id="payloadExample" class="alert alert-secondary mt-2" style="display:none;">
                    <strong>Exemple :</strong><br />
                    <pre class="mb-0 mt-2" style="font-size: 0.85em;"><code id="payloadExampleContent"></code></pre>
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    <label for="payload">Endpoint / Configuration</label>
                    <input type="text" id="payload" name="payload" class="form-control font-monospace"
                           value="@Model.Payload" placeholder="/GenerateError">
                    <small class="form-text text-muted">
                        L'endpoint sera automatiquement rempli selon votre sélection
                    </small>
                </div>

                <button type="submit" class="btn btn-danger mt-3">
                    <i class="fas fa-bug"></i> Voir les mauvaises configurations
                </button>
            </div>
        </div>
    </form>

    <!-- Description de l'attaque -->
    @if (!string.IsNullOrEmpty(Model.AttackType) && Model.AttackInfos.ContainsKey(Model.AttackType))
    {
        var attackInfo = Model.AttackInfos[Model.AttackType];
        var alertClass = attackInfo.RiskLevel.ToLower() switch
        {
            "critical" => "alert-danger",
            "high" => "alert-danger",
            "medium" => "alert-warning",
            _ => "alert-info"
        };

        <div class="@alertClass mt-4">
            <div class="d-flex align-items-start">
                <div class="me-3">
                    @if (attackInfo.RiskLevel == "Critical" || attackInfo.RiskLevel == "High")
                    {
                        <i class="fas fa-skull-crossbones text-danger fa-2x"></i>
                    }
                    else if (attackInfo.RiskLevel == "Medium")
                    {
                        <i class="fas fa-exclamation-triangle text-warning fa-2x"></i>
                    }
                    else
                    {
                        <i class="fas fa-info-circle text-info fa-2x"></i>
                    }
                </div>
                <div class="flex-grow-1">
                    <h5>@Model.AttackType.ToUpper() - @attackInfo.RiskLevel Risk</h5>
                    <p class="mb-2">@attackInfo.Description</p>
                    <div class="d-flex gap-2">
                        <a href="@attackInfo.LearnMoreUrl" target="_blank" class="btn btn-sm btn-outline-primary">
                            <i class="fas fa-external-link-alt"></i> En savoir plus
                        </a>
                        <span class="badge bg-@(attackInfo.RiskLevel.ToLower() == "critical" || attackInfo.RiskLevel.ToLower() == "high" ? "danger" : attackInfo.RiskLevel.ToLower() == "medium" ? "warning" : "info")">
                            Risque : @attackInfo.RiskLevel
                        </span>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Gestion des erreurs -->
    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div class="alert alert-danger">
            <h5><i class="fas fa-times-circle"></i> Erreur</h5>
            <p><strong>Message :</strong> @Model.ErrorMessage</p>
        </div>
    }

    <!-- Résultats -->
    @if (Model.Results?.Any() == true)
    {
        <div class="mt-4">
            <div class="alert alert-info">
                <h5><i class="fas fa-info-circle"></i> Instructions de test</h5>
                <p>Testez ces mauvaises configurations directement :</p>

                @if (Model.AttackType == "debug-enabled")
                {
                    <strong>Mode debug avec stack trace complète :</strong>
                    <br />
                    <code>GET /SecurityMisconfiguration/GenerateError</code>
                    <br />
                    <div class="mt-2">
                        <a href="/SecurityMisconfiguration/GenerateError" target="_blank" class="btn btn-danger btn-sm">
                            <i class="fas fa-bomb"></i> Générer une erreur (voir stack trace)
                        </a>
                    </div>
                }
                else if (Model.AttackType == "default-creds")
                {
                    <strong>Credentials par défaut acceptés :</strong>
                    <br />
                    <code>POST /SecurityMisconfiguration/AdminLogin</code>
                    <br />
                    <div class="mt-2 default-creds-test">
                        <button class="btn btn-danger btn-sm test-default-creds" data-user="admin" data-pass="admin">
                            <i class="fas fa-key"></i> Tester admin/admin
                        </button>
                        <button class="btn btn-danger btn-sm test-default-creds" data-user="root" data-pass="root123">
                            <i class="fas fa-key"></i> Tester root/root123
                        </button>
                        <button class="btn btn-danger btn-sm test-default-creds" data-user="sa" data-pass="password">
                            <i class="fas fa-database"></i> Tester sa/password
                        </button>
                    </div>
                }
                else if (Model.AttackType == "directory-listing")
                {
                    <strong>Directory listing activé :</strong>
                    <br />
                    <code>GET /SecurityMisconfiguration/ListFiles?path=wwwroot</code>
                    <br />
                    <div class="mt-2">
                        <a href="/SecurityMisconfiguration/ListFiles?path=wwwroot" target="_blank" class="btn btn-danger btn-sm">
                            <i class="fas fa-folder-open"></i> Lister wwwroot
                        </a>
                        <a href="/SecurityMisconfiguration/ListFiles?path=Views" target="_blank" class="btn btn-danger btn-sm">
                            <i class="fas fa-folder-open"></i> Lister Views
                        </a>
                        <a href="/SecurityMisconfiguration/ListFiles?path=." target="_blank" class="btn btn-danger btn-sm">
                            <i class="fas fa-folder-open"></i> Lister racine
                        </a>
                    </div>
                }
                else if (Model.AttackType == "xxe-enabled")
                {
                    <strong>XXE (XML External Entity) activé :</strong>
                    <br />
                    <code>POST /SecurityMisconfiguration/ProcessXml</code>
                    <br />
                    <pre class="mt-2">&lt;!DOCTYPE foo [&lt;!ENTITY xxe SYSTEM "file:///etc/passwd"&gt;]&gt;
        &lt;foo&gt;&amp;xxe;&lt;/foo&gt;</pre>
                    <button class="btn btn-danger btn-sm test-xxe">
                        <i class="fas fa-code"></i> Tester XXE
                    </button>
                    <small class="text-muted d-block mt-2">Utilisez Postman ou l'inspecteur réseau pour envoyer ce XML</small>
                }
                else if (Model.AttackType == "weak-crypto")
                {
                    <strong>Cryptographie faible (MD5/DES) :</strong>
                    <br />
                    <code>GET /SecurityMisconfiguration/EncryptData?data=secret</code>
                    <br />
                    <div class="mt-2">
                        <a href="/SecurityMisconfiguration/EncryptData?data=MySecretPassword123" target="_blank" class="btn btn-danger btn-sm">
                            <i class="fas fa-lock-open"></i> Chiffrer avec MD5/DES
                        </a>
                        <a href="/SecurityMisconfiguration/EncryptData?data=CreditCard:4111-1111-1111-1111" target="_blank" class="btn btn-danger btn-sm">
                            <i class="fas fa-credit-card"></i> Chiffrer données sensibles
                        </a>
                    </div>
                }
                else if (Model.AttackType == "cors-misconfigured")
                {
                    <strong>CORS mal configuré (Accept: *) :</strong>
                    <br />
                    <code>GET /SecurityMisconfiguration/ApiData</code>
                    <br />
                    <div class="mt-2">
                        <a href="/SecurityMisconfiguration/ApiData" target="_blank" class="btn btn-danger btn-sm">
                            <i class="fas fa-globe"></i> Accéder à l'API (CORS: *)
                        </a>
                        <button class="btn btn-warning btn-sm test-cors">
                            <i class="fas fa-network-wired"></i> Tester depuis autre origine
                        </button>
                    </div>
                }
                else if (Model.AttackType == "headers-missing")
                {
                    <strong>Headers de sécurité manquants :</strong>
                    <br />
                    <code>GET /SecurityMisconfiguration/CheckHeaders</code>
                    <br />
                    <div class="mt-2">
                        <a href="/SecurityMisconfiguration/CheckHeaders" target="_blank" class="btn btn-danger btn-sm">
                            <i class="fas fa-shield-alt"></i> Vérifier les headers
                        </a>
                    </div>
                }
                else if (Model.AttackType == "sensitive-data-exposure")
                {
                    <strong>Exposition de configuration sensible :</strong>
                    <br />
                    <code>GET /SecurityMisconfiguration/GetConfig</code>
                    <br />
                    <div class="mt-2">
                        <a href="/SecurityMisconfiguration/GetConfig" target="_blank" class="btn btn-danger btn-sm">
                            <i class="fas fa-cogs"></i> Voir la configuration
                        </a>
                        <a href="/SecurityMisconfiguration/GetLogs" target="_blank" class="btn btn-danger btn-sm">
                            <i class="fas fa-file-alt"></i> Voir les logs
                        </a>
                        <a href="/SecurityMisconfiguration/GetBackupFile?filename=web.config.bak" target="_blank" class="btn btn-danger btn-sm">
                            <i class="fas fa-archive"></i> Fichiers backup
                        </a>
                    </div>
                }

                <div class="mt-3">
                    <a href="/SecurityMisconfiguration/TestEndpoints" target="_blank" class="btn btn-info btn-sm">
                        <i class="fas fa-list"></i> Voir toutes les mauvaises configurations
                    </a>
                </div>
            </div>

            <!-- Vulnérabilités détectables -->
            <div class="alert alert-warning mt-3">
                <h6><i class="fas fa-search"></i> Ce que les SAST vont détecter :</h6>
                <ul class="mb-0">
                    <li><strong>Debug Mode :</strong> Stack trace et informations système exposées</li>
                    <li><strong>Hardcoded Credentials :</strong> Mots de passe en dur dans le code</li>
                    <li><strong>XXE Processing :</strong> DtdProcessing.Parse activé</li>
                    <li><strong>Weak Cryptography :</strong> MD5, DES, clés faibles</li>
                    <li><strong>CORS Misconfiguration :</strong> Access-Control-Allow-Origin: *</li>
                    <li><strong>Missing Security Headers :</strong> X-Frame-Options, CSP, etc.</li>
                    <li><strong>Information Disclosure :</strong> Configuration et secrets exposés</li>
                    <li><strong>Directory Traversal :</strong> Énumération de fichiers</li>
                </ul>
            </div>
        </div>
    }

    <!-- Exemples de code vulnérable -->
    <div class="mt-4">
        <div class="card border-secondary">
            <div class="card-header bg-secondary text-white">
                <h6><i class="fas fa-code"></i> Patterns détectables par SAST</h6>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <h6>Debug mode exposé :</h6>
                        <pre class="small"><code>catch (Exception ex)
{
    return Json(new {
        stackTrace = ex.StackTrace,
        innerException = ex.InnerException
    });
}</code></pre>

                        <h6>Credentials en dur :</h6>
                        <pre class="small"><code>var defaultCredentials = new Dictionary
{
    ["admin"] = "admin",
    ["root"] = "root123"
};</code></pre>
                    </div>
                    <div class="col-md-6">
                        <h6>XXE activé :</h6>
                        <pre class="small"><code>var settings = new XmlReaderSettings
{
    DtdProcessing = DtdProcessing.Parse,
    XmlResolver = new XmlUrlResolver()
};</code></pre>

                        <h6>Crypto faible :</h6>
                        <pre class="small"><code>using (var md5 = MD5.Create())
using (var des = DES.Create())
{
    des.Key = "12345678"; // Clé faible!
}</code></pre>
                    </div>
                </div>

                <div class="mt-3">
                    <strong>Outils qui détecteront ces failles :</strong>
                    <span class="badge bg-danger">Snyk</span>
                    <span class="badge bg-warning text-dark">SonarQube</span>
                    <span class="badge bg-info">Fortify</span>
                    <span class="badge bg-success">Checkmarx</span>
                    <span class="badge bg-secondary">Veracode</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Configuration problématique -->
    <div class="mt-4">
        <div class="card border-danger">
            <div class="card-header bg-danger text-white">
                <h6><i class="fas fa-exclamation-triangle"></i> Configurations problématiques actives</h6>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <h6>Paramètres dangereux :</h6>
                        <ul class="mb-0">
                            <li><code>customErrors mode="Off"</code></li>
                            <li><code>compilation debug="true"</code></li>
                            <li><code>trace enabled="true"</code></li>
                            <li><code>httpRuntime enableVersionHeader="true"</code></li>
                        </ul>
                    </div>
                    <div class="col-md-6">
                        <h6>Fichiers exposés :</h6>
                        <ul class="mb-0">
                            <li><code>/web.config.bak</code></li>
                            <li><code>/backup/database.sql</code></li>
                            <li><code>/.env</code></li>
                            <li><code>/elmah.axd</code></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Prévention (non implémentée) -->
    <div class="mt-4">
        <div class="card border-info">
            <div class="card-header bg-info text-white">
                <h6><i class="fas fa-shield-alt"></i> Prévention (NON implémentée ici)</h6>
            </div>
            <div class="card-body">
                <p><strong>Note :</strong> Ces protections ne sont PAS implémentées pour permettre la détection SAST :</p>
                <ul class="mb-0">
                    <li><strong>Mode production :</strong> Désactiver debug, trace et erreurs détaillées</li>
                    <li><strong>Credentials sécurisés :</strong> Utiliser Azure Key Vault ou secrets manager</li>
                    <li><strong>XXE désactivé :</strong> DtdProcessing.Prohibit</li>
                    <li><strong>Crypto moderne :</strong> AES-256, SHA-256 minimum</li>
                    <li><strong>CORS restrictif :</strong> Origines spécifiques uniquement</li>
                    <li><strong>Headers de sécurité :</strong> CSP, HSTS, X-Frame-Options, etc.</li>
                    <li><strong>Minimisation d'infos :</strong> Ne jamais exposer la configuration</li>
                    <li><strong>Suppression fichiers :</strong> Pas de .bak, .old, .tmp en production</li>
                </ul>
            </div>
        </div>
    </div>

    <!-- Test de configuration -->
    <div class="mt-4">
        <h6><i class="fas fa-clipboard-check"></i> Checklist de mauvaises configurations</h6>
        <div class="row">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">Configurations exposées</div>
                    <div class="card-body">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" checked disabled>
                            <label class="form-check-label text-danger">
                                <i class="fas fa-bug"></i> Mode debug activé
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" checked disabled>
                            <label class="form-check-label text-danger">
                                <i class="fas fa-key"></i> Credentials par défaut
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" checked disabled>
                            <label class="form-check-label text-danger">
                                <i class="fas fa-folder-open"></i> Directory listing
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" checked disabled>
                            <label class="form-check-label text-danger">
                                <i class="fas fa-code"></i> XXE processing
                            </label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">Protections manquantes</div>
                    <div class="card-body">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" disabled>
                            <label class="form-check-label text-muted">
                                <i class="fas fa-shield-alt"></i> Headers de sécurité
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" disabled>
                            <label class="form-check-label text-muted">
                                <i class="fas fa-lock"></i> Crypto forte (AES/SHA256)
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" disabled>
                            <label class="form-check-label text-muted">
                                <i class="fas fa-globe"></i> CORS restrictif
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" disabled>
                            <label class="form-check-label text-muted">
                                <i class="fas fa-eye-slash"></i> Infos minimisées
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="~/css/security-misconfiguration.css" asp-append-version="true" />
}

@section Scripts {
    <!-- Données JSON sécurisées -->
    <script type="application/json" id="attackInfosData">
        @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.AttackInfos, new System.Text.Json.JsonSerializerOptions { PropertyNamingPolicy = null }))
    </script>

    <!-- Données pour le JavaScript -->
    <script>
        window.securityMisconfigurationData = {
            hasResults: @Json.Serialize(Model.Results?.Any() == true),
            hasError: @Json.Serialize(!string.IsNullOrEmpty(Model.ErrorMessage)),
            attackType: @Json.Serialize(Model.AttackType ?? ""),
            payload: @Json.Serialize(Model.Payload ?? "")
        };
    </script>

    <!-- Scripts externes -->
    <script src="~/js/vulnerability-common.js"></script>
    <script src="~/js/security-misconfiguration.js"></script>
}