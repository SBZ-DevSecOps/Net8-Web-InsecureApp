@using InsecureAppWebNet8.ViewModels
@using InsecureAppWebNet8.Controllers
@model VulnerabilityViewModel<AuthenticationResult>

@{
    ViewData["Title"] = "Authentication Vulnerabilities";
}

<div class="container mt-4">
    <!-- Avertissement de sécurité -->
    <div class="alert alert-danger" role="alert">
        <i class="fas fa-exclamation-triangle"></i>
        <strong>DANGER :</strong> Ce module contient de vraies vulnérabilités d&apos;authentification détectables par les outils SAST.
        Les mots de passe sont stockés en clair et les sessions sont prévisibles !
    </div>

    <h2>Authentication Vulnerabilities</h2>
    <p class="text-muted">Failles d&apos;identification et d&apos;authentification permettant l&apos;accès non autorisé</p>

    <!-- État du système -->
    <div class="alert alert-warning">
        <i class="fas fa-shield-alt"></i> <strong>Configuration système :</strong>
        Stockage : <strong>PLAINTEXT + MD5</strong> | Sessions : <strong>SÉQUENTIELLES</strong> |
        Lockout : <strong>DÉSACTIVÉ</strong> | Rate limit : <strong>AUCUN</strong>
    </div>

    <!-- Formulaire principal -->
    <form asp-controller="Authentication" asp-action="Index" method="post" class="mb-4">
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    <label for="attackType">Type de vulnérabilité d&apos;authentification</label>
                    <select id="attackType" name="attackType" class="form-control">
                        <option value="">-- Sélectionnez un type --</option>
                        @foreach (var attackInfo in Model.AttackInfos)
                        {
                            var selected = Model.AttackType == attackInfo.Key;
                            <option value="@attackInfo.Key"
                                    data-payload-example="@attackInfo.Value.PayloadExample"
                                    data-risk-level="@attackInfo.Value.RiskLevel"
                                    selected="@selected">
                                @attackInfo.Key.ToUpper() - @attackInfo.Value.RiskLevel
                            </option>
                        }
                    </select>
                </div>

                <!-- Exemple de payload -->
                <div id="payloadExample" class="alert alert-secondary mt-2" style="display:none;">
                    <strong>Exemple :</strong><br />
                    <pre class="mb-0 mt-2" style="font-size: 0.85em;"><code id="payloadExampleContent"></code></pre>
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    <label for="payload">Credentials / Payload</label>
                    <input type="text" id="payload" name="payload" class="form-control font-monospace"
                           value="@Model.Payload" placeholder="admin/admin123">
                    <small class="form-text text-muted">
                        Les credentials seront automatiquement remplis selon votre sélection
                    </small>
                </div>

                <button type="submit" class="btn btn-danger mt-3">
                    <i class="fas fa-user-lock"></i> Analyser la vulnérabilité
                </button>
            </div>
        </div>
    </form>

    <!-- Description de l'attaque -->
    @if (!string.IsNullOrEmpty(Model.AttackType) && Model.AttackInfos.ContainsKey(Model.AttackType))
    {
        var attackInfo = Model.AttackInfos[Model.AttackType];
        var alertClass = attackInfo.RiskLevel.ToLower() switch
        {
            "critical" => "alert-danger",
            "high" => "alert-danger",
            "medium" => "alert-warning",
            _ => "alert-info"
        };

        <div class="@alertClass mt-4">
            <div class="d-flex align-items-start">
                <div class="me-3">
                    @if (attackInfo.RiskLevel == "Critical" || attackInfo.RiskLevel == "High")
                    {
                        <i class="fas fa-skull-crossbones text-danger fa-2x"></i>
                    }
                    else if (attackInfo.RiskLevel == "Medium")
                    {
                        <i class="fas fa-exclamation-triangle text-warning fa-2x"></i>
                    }
                    else
                    {
                        <i class="fas fa-info-circle text-info fa-2x"></i>
                    }
                </div>
                <div class="flex-grow-1">
                    <h5>@Model.AttackType.ToUpper() - @attackInfo.RiskLevel Risk</h5>
                    <p class="mb-2">@attackInfo.Description</p>
                    <div class="d-flex gap-2">
                        <a href="@attackInfo.LearnMoreUrl" target="_blank" class="btn btn-sm btn-outline-primary">
                            <i class="fas fa-external-link-alt"></i> En savoir plus
                        </a>
                        <span class="badge bg-@(attackInfo.RiskLevel.ToLower() == "critical" || attackInfo.RiskLevel.ToLower() == "high" ? "danger" : attackInfo.RiskLevel.ToLower() == "medium" ? "warning" : "info")">
                            Risque : @attackInfo.RiskLevel
                        </span>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Résultats -->
    @if (Model.Results?.Any() == true)
    {
        <div class="mt-4">
            <div class="alert alert-info">
                <h5><i class="fas fa-info-circle"></i> Instructions de test</h5>
                <p>Testez ces vulnérabilités d&apos;authentification directement :</p>

                @if (Model.AttackType == "weak-credentials")
                {
                    <strong>Test de connexion avec credentials faibles :</strong>
                    <br />
                    <div class="auth-form mt-3 p-3 border rounded">
                        <form id="weakLoginForm">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Nom d&apos;utilisateur :</label>
                                        <input type="text" class="form-control" id="loginUsername" value="admin">
                                        <small class="text-muted">Essayez: admin, user1, test</small>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Mot de passe :</label>
                                        <input type="text" class="form-control" id="loginPassword" value="admin123">
                                        <small class="text-danger">Mots de passe faibles acceptés!</small>
                                    </div>
                                </div>
                            </div>
                            <button type="submit" class="btn btn-danger">
                                <i class="fas fa-sign-in-alt"></i> Se connecter
                            </button>
                            <div class="mt-2">
                                <strong>Credentials par défaut :</strong>
                                <code>admin/admin123</code>, <code>user1/password</code>, <code>test/123456</code>
                            </div>
                        </form>
                    </div>
                }
                else if (Model.AttackType == "user-enumeration")
                {
                    <strong>Énumération d&apos;utilisateurs via messages d&apos;erreur :</strong>
                    <br />
                    <div class="auth-form mt-3 p-3 border rounded">
                        <form id="userEnumForm">
                            <div class="mb-3">
                                <label class="form-label">Tester l&apos;existence d&apos;utilisateurs :</label>
                                <input type="text" class="form-control" id="enumUsername" placeholder="admin">
                                <small class="text-muted">Comparez: &apos;admin&apos; vs &apos;userquinexistepas&apos;</small>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Mot de passe (peu importe) :</label>
                                <input type="password" class="form-control" id="enumPassword" value="test">
                            </div>
                            <button type="submit" class="btn btn-danger">
                                <i class="fas fa-search"></i> Tester l&apos;utilisateur
                            </button>
                            <button type="button" class="btn btn-warning ms-2" onclick="testMultipleUsers()">
                                <i class="fas fa-users"></i> Scanner plusieurs
                            </button>
                        </form>
                    </div>
                }
                else if (Model.AttackType == "timing-attack")
                {
                    <strong>Timing attack pour découvrir les utilisateurs valides :</strong>
                    <br />
                    <div class="auth-form mt-3 p-3 border rounded">
                        <form id="timingForm">
                            <div class="mb-3">
                                <label class="form-label">Mesurer le temps de réponse :</label>
                                <input type="text" class="form-control" id="timingUsername" placeholder="admin">
                            </div>
                            <button type="submit" class="btn btn-danger">
                                <i class="fas fa-stopwatch"></i> Mesurer timing
                            </button>
                            <button type="button" class="btn btn-warning ms-2" onclick="runTimingAnalysis()">
                                <i class="fas fa-chart-line"></i> Analyse complète
                            </button>
                        </form>
                        <div id="timingResults" class="mt-3" style="display:none;">
                            <canvas id="timingChart" width="400" height="200"></canvas>
                        </div>
                    </div>
                }
                else if (Model.AttackType == "weak-session")
                {
                    <strong>Sessions prévisibles et hijacking :</strong>
                    <br />
                    <div class="auth-form mt-3 p-3 border rounded">
                        <div class="mb-3">
                            <button type="button" class="btn btn-danger" onclick="createPredictableSession()">
                                <i class="fas fa-key"></i> Créer une session
                            </button>
                            <button type="button" class="btn btn-warning ms-2" onclick="hijackSession()">
                                <i class="fas fa-user-secret"></i> Hijacker une session
                            </button>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Vérifier une session ID :</label>
                            <input type="text" class="form-control" id="sessionIdCheck" placeholder="1, 2, 3...">
                            <button type="button" class="btn btn-info mt-2" onclick="checkSession()">
                                <i class="fas fa-check"></i> Vérifier
                            </button>
                        </div>
                    </div>
                }
                else if (Model.AttackType == "insecure-storage")
                {
                    <strong>Stockage non sécurisé des mots de passe :</strong>
                    <br />
                    <div class="auth-form mt-3 p-3 border rounded">
                        <form id="registerForm">
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label class="form-label">Username :</label>
                                        <input type="text" class="form-control" id="regUsername">
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label class="form-label">Password :</label>
                                        <input type="text" class="form-control" id="regPassword">
                                        <small class="text-danger">Min 3 caractères seulement!</small>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label class="form-label">Email :</label>
                                        <input type="email" class="form-control" id="regEmail">
                                    </div>
                                </div>
                            </div>
                            <button type="submit" class="btn btn-danger">
                                <i class="fas fa-user-plus"></i> Créer compte
                            </button>
                        </form>
                    </div>
                }
                else if (Model.AttackType == "no-account-lockout")
                {
                    <strong>Brute force sans protection :</strong>
                    <br />
                    <div class="auth-form mt-3 p-3 border rounded">
                        <form id="bruteForceForm">
                            <div class="mb-3">
                                <label class="form-label">Cible du brute force :</label>
                                <input type="text" class="form-control" id="bruteUsername" value="admin">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Liste de mots de passe :</label>
                                <textarea class="form-control" id="passwordList" rows="4">admin123
password
123456
admin
test123
password123</textarea>
                            </div>
                            <button type="submit" class="btn btn-danger">
                                <i class="fas fa-hammer"></i> Lancer brute force
                            </button>
                            <button type="button" class="btn btn-warning ms-2" onclick="loadCommonPasswords()">
                                <i class="fas fa-list"></i> Top 100 passwords
                            </button>
                        </form>
                        <div id="bruteProgress" class="mt-3" style="display:none;">
                            <div class="progress">
                                <div class="progress-bar bg-danger" role="progressbar" style="width: 0%"></div>
                            </div>
                        </div>
                    </div>
                }

                <div class="mt-3">
                    <a href="/Authentication/TestEndpoints" target="_blank" class="btn btn-secondary btn-sm">
                        <i class="fas fa-vial"></i> Tous les endpoints
                    </a>
                </div>
            </div>

            <!-- Vulnérabilités détectables -->
            <div class="alert alert-warning mt-3">
                <h6><i class="fas fa-search"></i> Ce que les SAST vont détecter :</h6>
                <ul class="mb-0">
                    <li><strong>Weak password storage</strong> - Plaintext et MD5</li>
                    <li><strong>User enumeration</strong> - Messages d&apos;erreur différents</li>
                    <li><strong>Timing vulnerabilities</strong> - Différences de temps</li>
                    <li><strong>Predictable tokens</strong> - Sessions séquentielles</li>
                    <li><strong>No rate limiting</strong> - Brute force possible</li>
                    <li><strong>Insecure cookies</strong> - Sans HttpOnly/Secure</li>
                    <li><strong>Password policy</strong> - Règles trop faibles</li>
                </ul>
            </div>
        </div>
    }

    <!-- Exemples de code vulnérable -->
    <div class="mt-4">
        <div class="card border-secondary">
            <div class="card-header bg-secondary text-white">
                <h6><i class="fas fa-code"></i> Patterns détectables par SAST</h6>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <h6>Stockage en clair :</h6>
                        <pre class="small"><code>// VULNÉRABLE - Plaintext
user.Password = password;
// VULNÉRABLE - MD5
user.Hash = MD5.Create().ComputeHash(...);</code></pre>

                        <h6>User enumeration :</h6>
                        <pre class="small"><code>// VULNÉRABLE - Messages différents
if (!userExists) 
    return "User not found";
else if (wrongPassword)
    return "Invalid password";</code></pre>
                    </div>
                    <div class="col-md-6">
                        <h6>Sessions prévisibles :</h6>
                        <pre class="small"><code>// VULNÉRABLE - ID séquentiel
sessionId = (_sessions.Count + 1).ToString();
// VULNÉRABLE - Pas de random
token = DateTime.Now.Ticks.ToString();</code></pre>

                        <h6>Pas de protection :</h6>
                        <pre class="small"><code>// VULNÉRABLE - Pas de limite
foreach (var password in passwords) {
    // Essais illimités
}</code></pre>
                    </div>
                </div>

                <div class="mt-3">
                    <strong>Outils qui détecteront ces failles :</strong>
                    <span class="badge bg-danger">Snyk</span>
                    <span class="badge bg-warning text-dark">SonarQube</span>
                    <span class="badge bg-info">Fortify</span>
                    <span class="badge bg-success">Checkmarx</span>
                    <span class="badge bg-secondary">Semgrep</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Zone de résultats -->
    <div class="mt-4" id="authResults" style="display:none;">
        <div class="card border-danger">
            <div class="card-header bg-danger text-white">
                <h6><i class="fas fa-key"></i> Résultat de l&apos;authentification</h6>
            </div>
            <div class="card-body" id="authResultContent">
                <!-- Rempli dynamiquement -->
            </div>
        </div>
    </div>

    <!-- Sessions actives -->
    <div class="mt-4" id="sessionsList" style="display:none;">
        <div class="card border-warning">
            <div class="card-header bg-warning text-dark">
                <h6><i class="fas fa-users"></i> Sessions actives (exposées!)</h6>
            </div>
            <div class="card-body" id="sessionsContent">
                <!-- Rempli dynamiquement -->
            </div>
        </div>
    </div>

    <!-- Cas d'utilisation réels -->
    <div class="mt-4">
        <div class="card border-danger">
            <div class="card-header bg-danger text-white">
                <h6><i class="fas fa-user-secret"></i> Scénarios d&apos;exploitation réels</h6>
            </div>
            <div class="card-body">
                <div class="accordion" id="exploitScenariosAccordion">
                    <!-- Scénario 1: Corporate Espionage -->
                    <div class="accordion-item">
                        <h2 class="accordion-header">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#scenario1">
                                <i class="fas fa-building me-2"></i> Espionnage d&apos;entreprise via credentials faibles
                            </button>
                        </h2>
                        <div id="scenario1" class="accordion-collapse collapse" data-bs-parent="#exploitScenariosAccordion">
                            <div class="accordion-body">
                                <strong>Contexte :</strong> Une entreprise utilise des comptes avec mots de passe par défaut.<br>
                                <strong>Attaque :</strong>
                                <ol>
                                    <li>L&apos;attaquant scanne les portails d&apos;entreprise exposés</li>
                                    <li>Teste les credentials par défaut : admin/admin123, root/toor</li>
                                    <li>Accède aux systèmes internes et vole des données sensibles</li>
                                </ol>
                                <strong>Impact réel :</strong> En 2021, Colonial Pipeline a été compromise via un compte VPN avec mot de passe faible.<br>
                                <strong>Coût :</strong> $4.4 millions de rançon + interruption de service
                            </div>
                        </div>
                    </div>

                    <!-- Scénario 2: Account Takeover -->
                    <div class="accordion-item">
                        <h2 class="accordion-header">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#scenario2">
                                <i class="fas fa-user-ninja me-2"></i> Vol de compte par énumération d&apos;utilisateurs
                            </button>
                        </h2>
                        <div id="scenario2" class="accordion-collapse collapse" data-bs-parent="#exploitScenariosAccordion">
                            <div class="accordion-body">
                                <strong>Contexte :</strong> Site e-commerce avec messages d&apos;erreur différenciés.<br>
                                <strong>Attaque :</strong>
                                <ol>
                                    <li>Énumération de comptes valides via messages d&apos;erreur</li>
                                    <li>Création d&apos;une liste d&apos;emails valides</li>
                                    <li>Attaque par phishing ciblé ou credential stuffing</li>
                                    <li>Vol de comptes et achats frauduleux</li>
                                </ol>
                                <strong>Impact réel :</strong> Ashley Madison (2015) - 37 millions de comptes exposés<br>
                                <strong>Technique :</strong>
                                <pre><code>for email in email_list:
    response = login(email, &quot;wrong_password&quot;)
    if &quot;Invalid password&quot; in response:
        valid_users.append(email)</code></pre>
                            </div>
                        </div>
                    </div>

                    <!-- Scénario 3: Session Hijacking -->
                    <div class="accordion-item">
                        <h2 class="accordion-header">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#scenario3">
                                <i class="fas fa-cookie-bite me-2"></i> Vol de session administrateur
                            </button>
                        </h2>
                        <div id="scenario3" class="accordion-collapse collapse" data-bs-parent="#exploitScenariosAccordion">
                            <div class="accordion-body">
                                <strong>Contexte :</strong> Application web avec sessions prévisibles.<br>
                                <strong>Attaque :</strong>
                                <ol>
                                    <li>Création d&apos;un compte normal et obtention d&apos;ID session (ex: 142)</li>
                                    <li>Test des IDs proches : 141, 143, 144...</li>
                                    <li>Découverte d&apos;une session admin active</li>
                                    <li>Hijacking et élévation de privilèges</li>
                                </ol>
                                <strong>Exemple de code d&apos;exploitation :</strong>
                                <pre><code>my_session = 142
for i in range(my_session-50, my_session+50):
    if check_session(i):
        print(&quot;Session active trouvée: &quot; + str(i))
        steal_session(i)</code></pre>
                                <strong>Impact :</strong> Accès admin complet, modification de données, vol d&apos;informations
                            </div>
                        </div>
                    </div>

                    <!-- Scénario 4: Timing Attack -->
                    <div class="accordion-item">
                        <h2 class="accordion-header">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#scenario4">
                                <i class="fas fa-stopwatch me-2"></i> Extraction d&apos;utilisateurs VIP par timing
                            </button>
                        </h2>
                        <div id="scenario4" class="accordion-collapse collapse" data-bs-parent="#exploitScenariosAccordion">
                            <div class="accordion-body">
                                <strong>Contexte :</strong> Banque en ligne avec temps de réponse variables.<br>
                                <strong>Attaque :</strong>
                                <ol>
                                    <li>Mesure du temps de réponse pour différents usernames</li>
                                    <li>Les comptes existants prennent 100-150ms (vérification hash)</li>
                                    <li>Les comptes inexistants répondent en 10-20ms</li>
                                    <li>Identification des comptes à haute valeur</li>
                                </ol>
                                <strong>Script d&apos;attaque :</strong>
                                <pre><code>targets = [&quot;ceo@@bank.com&quot;, &quot;cfo@@bank.com&quot;, &quot;it@@bank.com&quot;]
for target in targets:
    times = []
    for _ in range(10):
        start = time.time()
        login(target, &quot;wrong&quot;)
        times.append(time.time() - start)
    avg = sum(times)/len(times)
    if avg > 0.05:  # 50ms
        print(target + &quot; EXISTS!&quot;)</code></pre>
                            </div>
                        </div>
                    </div>

                    <!-- Scénario 5: Credential Stuffing -->
                    <div class="accordion-item">
                        <h2 class="accordion-header">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#scenario5">
                                <i class="fas fa-database me-2"></i> Attaque massive avec base de données volées
                            </button>
                        </h2>
                        <div id="scenario5" class="accordion-collapse collapse" data-bs-parent="#exploitScenariosAccordion">
                            <div class="accordion-body">
                                <strong>Contexte :</strong> Site sans protection contre le brute force.<br>
                                <strong>Attaque :</strong>
                                <ol>
                                    <li>Utilisation de bases de données de fuites (HaveIBeenPwned)</li>
                                    <li>Test automatisé de millions de combinaisons</li>
                                    <li>Pas de rate limiting = tests illimités</li>
                                    <li>Compromission de milliers de comptes</li>
                                </ol>
                                <strong>Outils utilisés :</strong>
                                <ul>
                                    <li><strong>Sentry MBA</strong> - Outil de credential stuffing</li>
                                    <li><strong>OpenBullet</strong> - Framework d&apos;automatisation</li>
                                    <li><strong>STORM</strong> - Brute force distribué</li>
                                </ul>
                                <strong>Impact réel :</strong> Zoom (2020) - 500,000 comptes vendus sur le dark web<br>
                                <strong>Prévention manquée :</strong> CAPTCHA, rate limiting, 2FA
                            </div>
                        </div>
                    </div>

                    <!-- Scénario 6: Password Reset -->
                    <div class="accordion-item">
                        <h2 class="accordion-header">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#scenario6">
                                <i class="fas fa-key me-2"></i> Exploitation du reset de mot de passe
                            </button>
                        </h2>
                        <div id="scenario6" class="accordion-collapse collapse" data-bs-parent="#exploitScenariosAccordion">
                            <div class="accordion-body">
                                <strong>Contexte :</strong> Tokens de reset prévisibles (timestamp).<br>
                                <strong>Attaque :</strong>
                                <ol>
                                    <li>Demande de reset pour compte cible</li>
                                    <li>Token basé sur timestamp = prévisible</li>
                                    <li>Brute force du token dans une fenêtre de temps</li>
                                    <li>Reset du mot de passe sans accès email</li>
                                </ol>
                                <strong>Exemple :</strong>
                                <pre><code># Token = timestamp en millisecondes
current = int(time.time() * 1000)
for i in range(current - 10000, current + 10000):
    if try_reset_token(str(i)):
        print(&quot;Token trouvé: &quot; + str(i))
        reset_password(i, &quot;hacked123&quot;)</code></pre>
                                <strong>Cas réel :</strong> Instagram (2019) - Reset tokens prévisibles
                            </div>
                        </div>
                    </div>

                    <!-- Scénario 7: Supply Chain Attack -->
                    <div class="accordion-item">
                        <h2 class="accordion-header">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#scenario7">
                                <i class="fas fa-link me-2"></i> Attaque de la chaîne d&apos;approvisionnement
                            </button>
                        </h2>
                        <div id="scenario7" class="accordion-collapse collapse" data-bs-parent="#exploitScenariosAccordion">
                            <div class="accordion-body">
                                <strong>Contexte :</strong> Fournisseur SaaS avec comptes de service mal sécurisés.<br>
                                <strong>Attaque :</strong>
                                <ol>
                                    <li>Identification des comptes de service (api@@, integration@@)</li>
                                    <li>Ces comptes utilisent souvent des mots de passe simples</li>
                                    <li>Pas de 2FA car &quot;comptes techniques&quot;</li>
                                    <li>Accès à des milliers d&apos;entreprises clientes</li>
                                </ol>
                                <strong>Impact réel :</strong> SolarWinds (2020) - Password &quot;solarwinds123&quot;<br>
                                <strong>Victimes :</strong> 18,000 organisations incluant gouvernements<br>
                                <strong>Leçon :</strong> Les comptes de service sont souvent les plus vulnérables
                                <div class="alert alert-danger mt-2">
                                    <i class="fas fa-exclamation-triangle"></i> Un seul compte compromis peut affecter toute la supply chain
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Scénario 8: API Key Extraction -->
                    <div class="accordion-item">
                        <h2 class="accordion-header">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#scenario8">
                                <i class="fas fa-code me-2"></i> Vol de clés API via comptes développeurs
                            </button>
                        </h2>
                        <div id="scenario8" class="accordion-collapse collapse" data-bs-parent="#exploitScenariosAccordion">
                            <div class="accordion-body">
                                <strong>Contexte :</strong> Plateforme avec comptes développeurs mal protégés.<br>
                                <strong>Attaque :</strong>
                                <ol>
                                    <li>Ciblage des comptes dev@@, test@@, demo@@</li>
                                    <li>Mots de passe souvent : &quot;test123&quot;, &quot;demo123&quot;</li>
                                    <li>Accès aux clés API de production</li>
                                    <li>Utilisation pour miner des cryptomonnaies ou voler des données</li>
                                </ol>
                                <strong>Exemple de scan automatisé :</strong>
                                <pre><code>dev_accounts = [&quot;dev&quot;, &quot;test&quot;, &quot;demo&quot;, &quot;api&quot;, &quot;integration&quot;]
common_passwords = [&quot;123456&quot;, &quot;test123&quot;, &quot;demo123&quot;, &quot;password&quot;]

for account in dev_accounts:
    for password in common_passwords:
        email = account + &quot;@@company.com&quot;
        if login(email, password):
            api_keys = extract_api_keys()
            mine_crypto(api_keys)  # $$</code></pre>
                                <strong>Cas réel :</strong> Uber (2016) - Clés AWS exposées → 57M comptes volés<br>
                                <strong>Coût :</strong> Milliers de dollars en ressources cloud volées
                            </div>
                        </div>
                    </div>

                    <!-- Scénario 9: Social Engineering -->
                    <div class="accordion-item">
                        <h2 class="accordion-header">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#scenario9">
                                <i class="fas fa-user-friends me-2"></i> Ingénierie sociale basée sur l&apos;énumération
                            </button>
                        </h2>
                        <div id="scenario9" class="accordion-collapse collapse" data-bs-parent="#exploitScenariosAccordion">
                            <div class="accordion-body">
                                <strong>Contexte :</strong> Entreprise avec emails prévisibles et énumération possible.<br>
                                <strong>Attaque multicouche :</strong>
                                <ol>
                                    <li>Énumération des employés via LinkedIn</li>
                                    <li>Test des formats : prenom.nom@@, p.nom@@, pnom@@</li>
                                    <li>Confirmation via messages d&apos;erreur différenciés</li>
                                    <li>Campagne de spear phishing ultra-ciblée</li>
                                </ol>
                                <strong>Techniques avancées :</strong>
                                <ul>
                                    <li>Création de faux profils LinkedIn pour connecter</li>
                                    <li>Emails de &quot;RH&quot; avec liens malveillants</li>
                                    <li>Faux portails de connexion (clone parfait)</li>
                                </ul>
                                <strong>Taux de succès :</strong> 30% cliquent, 15% entrent leurs credentials<br>
                                <strong>Protection manquée :</strong> Messages d&apos;erreur génériques auraient tout évité
                            </div>
                        </div>
                    </div>

                    <!-- Scénario 10: Insider Threat -->
                    <div class="accordion-item">
                        <h2 class="accordion-header">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#scenario10">
                                <i class="fas fa-user-tie me-2"></i> Menace interne et escalade de privilèges
                            </button>
                        </h2>
                        <div id="scenario10" class="accordion-collapse collapse" data-bs-parent="#exploitScenariosAccordion">
                            <div class="accordion-body">
                                <strong>Contexte :</strong> Employé mécontent avec accès limité.<br>
                                <strong>Exploitation :</strong>
                                <ol>
                                    <li>Connaissance des conventions de nommage interne</li>
                                    <li>Test des comptes admin : admin@@, root@@, superuser@@</li>
                                    <li>Exploitation des mots de passe par défaut non changés</li>
                                    <li>Sessions prévisibles = vol de session admin</li>
                                </ol>
                                <strong>Données volées typiques :</strong>
                                <ul>
                                    <li>Base de données clients complète</li>
                                    <li>Code source propriétaire</li>
                                    <li>Informations financières sensibles</li>
                                    <li>Plans stratégiques confidentiels</li>
                                </ul>
                                <strong>Cas réel :</strong> Edward Snowden - Accès via comptes partagés<br>
                                <strong>Prévention :</strong> Audit régulier + rotation des mots de passe
                            </div>
                        </div>
                    </div>

                    <!-- Scénario 11: IoT Botnet -->
                    <div class="accordion-item">
                        <h2 class="accordion-header">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#scenario11">
                                <i class="fas fa-robot me-2"></i> Création de botnet IoT via credentials par défaut
                            </button>
                        </h2>
                        <div id="scenario11" class="accordion-collapse collapse" data-bs-parent="#exploitScenariosAccordion">
                            <div class="accordion-body">
                                <strong>Contexte :</strong> Millions d&apos;appareils IoT avec mots de passe par défaut.<br>
                                <strong>Attaque Mirai-style :</strong>
                                <ol>
                                    <li>Scan massif d&apos;IP pour trouver des appareils IoT</li>
                                    <li>Test de 60 combinaisons communes</li>
                                    <li>root/root, admin/admin, admin/1234</li>
                                    <li>Infection et ajout au botnet</li>
                                </ol>
                                <strong>Code malware simplifié :</strong>
                                <pre><code>credentials = [
    (&quot;admin&quot;, &quot;admin&quot;), (&quot;root&quot;, &quot;root&quot;),
    (&quot;admin&quot;, &quot;1234&quot;), (&quot;user&quot;, &quot;user&quot;),
    (&quot;admin&quot;, &quot;&quot;), (&quot;root&quot;, &quot;vizxv&quot;)
]
for ip in scan_internet():
    for user, pwd in credentials:
        if telnet_login(ip, user, pwd):
            infect_device(ip)
            add_to_botnet(ip)</code></pre>
                                <strong>Impact :</strong> DDoS de 1.2 Tbps contre Dyn (2016)<br>
                                <strong>Appareils infectés :</strong> Caméras, routeurs, DVR, imprimantes
                            </div>
                        </div>
                    </div>

                    <!-- Scénario 12: Ransomware -->
                    <div class="accordion-item">
                        <h2 class="accordion-header">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#scenario12">
                                <i class="fas fa-lock me-2"></i> Déploiement de ransomware via RDP
                            </button>
                        </h2>
                        <div id="scenario12" class="accordion-collapse collapse" data-bs-parent="#exploitScenariosAccordion">
                            <div class="accordion-body">
                                <strong>Contexte :</strong> Serveurs RDP exposés avec auth faible.<br>
                                <strong>Chaîne d&apos;attaque :</strong>
                                <ol>
                                    <li>Scan Shodan pour trouver RDP ouverts (port 3389)</li>
                                    <li>Brute force avec outils comme NLBrute</li>
                                    <li>Comptes ciblés : Administrator, Admin, User</li>
                                    <li>Une fois connecté, déploiement du ransomware</li>
                                </ol>
                                <strong>Statistiques effrayantes :</strong>
                                <ul>
                                    <li>4.7 millions de serveurs RDP exposés sur Internet</li>
                                    <li>85% utilisent des mots de passe faibles</li>
                                    <li>Temps moyen avant compromission : 3 jours</li>
                                </ul>
                                <strong>Groupes APT actifs :</strong> LockBit, BlackCat, Conti<br>
                                <strong>Rançon moyenne :</strong> $812,360 (2023)<br>
                                <div class="alert alert-warning mt-2">
                                    <i class="fas fa-dollar-sign"></i> Les hôpitaux sont les cibles favorites (vies en jeu = paiement rapide)
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Statistiques -->
                <div class="mt-4 p-3 bg-light rounded">
                    <h6><i class="fas fa-chart-line"></i> Statistiques d&apos;exploitation (2023)</h6>
                    <div class="row">
                        <div class="col-md-6">
                            <ul class="mb-0">
                                <li><strong>81%</strong> des brèches impliquent des credentials compromis</li>
                                <li><strong>$4.45M</strong> coût moyen d&apos;une brèche de données</li>
                                <li><strong>287 jours</strong> temps moyen pour détecter une brèche</li>
                            </ul>
                        </div>
                        <div class="col-md-6">
                            <ul class="mb-0">
                                <li><strong>65%</strong> réutilisent les mêmes mots de passe</li>
                                <li><strong>2.2 milliards</strong> de credentials sur le dark web</li>
                                <li><strong>300%</strong> augmentation des attaques par credential stuffing</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Prévention (non implémentée) -->
    <div class="mt-4">
        <div class="card border-info">
            <div class="card-header bg-info text-white">
                <h6><i class="fas fa-shield-alt"></i> Prévention (NON implémentée ici)</h6>
            </div>
            <div class="card-body">
                <p><strong>Note :</strong> Ces protections ne sont PAS implémentées pour permettre la détection SAST :</p>
                <ul class="mb-0">
                    <li><strong>Hachage sécurisé</strong> : bcrypt, Argon2, PBKDF2</li>
                    <li><strong>Messages génériques</strong> : "Invalid credentials" pour tous</li>
                    <li><strong>Timing constant</strong> : Même délai pour tous les cas</li>
                    <li><strong>Sessions aléatoires</strong> : UUID cryptographiquement sûrs</li>
                    <li><strong>Account lockout</strong> : Après 5 tentatives échouées</li>
                    <li><strong>Rate limiting</strong> : Max 10 tentatives/minute</li>
                    <li><strong>2FA/MFA</strong> : Double authentification</li>
                    <li><strong>Cookies sécurisés</strong> : HttpOnly, Secure, SameSite</li>
                </ul>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="~/css/authentication.css" asp-append-version="true" />
}

@section Scripts {
    <!-- Données JSON sécurisées -->
    <script type="application/json" id="attackInfosData">
        @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.AttackInfos, new System.Text.Json.JsonSerializerOptions { PropertyNamingPolicy = null }))
    </script>

    <!-- Données pour le JavaScript -->
    <script>
        window.authenticationData = {
            hasResults: @Json.Serialize(Model.Results?.Any() == true),
            hasError: @Json.Serialize(!string.IsNullOrEmpty(Model.ErrorMessage)),
            attackType: @Json.Serialize(Model.AttackType ?? ""),
            payload: @Json.Serialize(Model.Payload ?? "")
        };
    </script>

    <!-- Scripts externes -->
    <script src="~/js/vulnerability-common.js"></script>
    <script src="~/js/authentication.js"></script>
}