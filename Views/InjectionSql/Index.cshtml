@using InsecureAppWebNet8.Helpers
@using InsecureAppWebNet8.ViewModels
@using InsecureAppWebNet8.Models
@model VulnerabilityViewModel<Product>

@{
    ViewData["Title"] = "Injection SQL";
}

<div class="container mt-4">
    <!-- Avertissement de sécurité -->
    <div class="alert alert-warning" role="alert">
        <i class="fas fa-exclamation-triangle"></i>
        <strong>Attention :</strong> Cette application est vulnérable par design pour des fins de test et d'apprentissage.
        Ne jamais utiliser ce code en production !
    </div>

    <h2>Injection SQL - Test de Payload</h2>

    <!-- Formulaire principal -->
    <form asp-action="Index" method="post" class="mb-4">
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    <label for="attackType">Type d'attaque</label>
                    <select id="attackType" name="attackType" class="form-control">
                        <option value="">-- Sélectionnez un type --</option>
                        @foreach (var attackInfo in Model.AttackInfos)
                        {
                            bool selected = Model.AttackType == attackInfo.Key;
                            <option value="@attackInfo.Key" selected="@(selected ? "selected" : null)">
                                @attackInfo.Key.ToUpper() - @attackInfo.Value.RiskLevel
                            </option>
                        }
                    </select>
                </div>

                <!-- Exemple de payload -->
                <div id="payloadExample" class="alert alert-secondary mt-2" style="display:none;">
                    <div class="d-flex justify-content-between align-items-start">
                        <div>
                            <strong>Exemple de payload :</strong><br />
                            <code id="payloadExampleContent"></code>
                        </div>
                        <button type="button" id="useExampleBtn" class="btn btn-sm btn-outline-primary" style="display:none;">
                            Utiliser
                        </button>
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    <label for="payload">Payload à tester</label>
                    <input type="text" id="payload" name="payload" class="form-control" value="@Model.Payload" placeholder="Entrez votre payload SQL..." />
                </div>

                <button type="submit" class="btn btn-primary mt-3">
                    <i class="fas fa-bug"></i> Tester l'injection
                </button>
            </div>
        </div>
    </form>

    <!-- Description de l'attaque -->
    @if (!string.IsNullOrEmpty(Model.AttackType) && Model.AttackInfos.ContainsKey(Model.AttackType))
    {
        var attackInfo = Model.AttackInfos[Model.AttackType];
        var alertClass = attackInfo.RiskLevel.ToLower() switch
        {
            "high" => "alert-danger",
            "medium" => "alert-warning",
            _ => "alert-info"
        };

        <div class="@alertClass mt-4">
            <div class="d-flex align-items-start">
                <div class="me-3">
                    @if (attackInfo.RiskLevel == "High")
                    {
                        <i class="fas fa-exclamation-circle text-danger fa-2x"></i>
                    }
                    else if (attackInfo.RiskLevel == "Medium")
                    {
                        <i class="fas fa-exclamation-triangle text-warning fa-2x"></i>
                    }
                    else
                    {
                        <i class="fas fa-info-circle text-info fa-2x"></i>
                    }
                </div>
                <div class="flex-grow-1">
                    <h5>@Model.AttackType.ToUpper() - Injection SQL</h5>
                    <p class="mb-2">@attackInfo.Description</p>
                    <div class="d-flex gap-2">
                        <a href="@attackInfo.LearnMoreUrl" target="_blank" class="btn btn-sm btn-outline-primary">
                            <i class="fas fa-external-link-alt"></i> En savoir plus
                        </a>
                        <span class="badge bg-@(attackInfo.RiskLevel.ToLower() == "high" ? "danger" : attackInfo.RiskLevel.ToLower() == "medium" ? "warning" : "info")">
                            Risque : @attackInfo.RiskLevel
                        </span>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- SQL exécuté -->
    @if (!string.IsNullOrEmpty(Model.ExecutedSql))
    {
        <div class="mb-3">
            <div class="d-flex justify-content-between align-items-center">
                <h5>SQL exécuté :</h5>
                <button type="button" class="btn btn-sm btn-outline-secondary" onclick="copySqlToClipboard()">
                    <i class="fas fa-copy"></i> Copier
                </button>
            </div>
            <pre class="bg-light p-3 border rounded"><code>@Model.ExecutedSql</code></pre>
        </div>
    }

    <!-- Gestion des erreurs -->
    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div class="alert alert-danger">
            <h5><i class="fas fa-times-circle"></i> Erreur SQL</h5>
            <p><strong>Message :</strong> @Model.ErrorMessage</p>

            @if (!string.IsNullOrEmpty(Model.ExecutedSql))
            {
                <p><strong>Requête SQL exécutée :</strong></p>
                <pre class="bg-light p-2 border rounded">@Model.ExecutedSql</pre>
            }

            @if (!string.IsNullOrEmpty(Model.AttackType) && Model.AttackInfos.ContainsKey(Model.AttackType))
            {
                var attackInfo = Model.AttackInfos[Model.AttackType];
                <div class="alert alert-warning mt-3">
                    <strong><i class="fas fa-lightbulb"></i> Pourquoi cette erreur ?</strong>
                    <p class="mb-0">@Html.Raw(attackInfo.ErrorExplanation)</p>
                </div>
            }
        </div>
    }

    <!-- Résultats -->
    @if (Model.Results?.Any() == true)
    {
        <div class="mt-4">
            <div class="d-flex justify-content-between align-items-center">
                <h5><i class="fas fa-table"></i> Résultats (@Model.Results.Count)</h5>
                <button type="button" class="btn btn-sm btn-outline-success" onclick="exportResults()">
                    <i class="fas fa-download"></i> Exporter CSV
                </button>
            </div>

            <div class="table-responsive">
                <table class="table table-striped table-hover mt-3">
                    <thead class="table-dark">
                        <tr>
                            <th>Id</th>
                            <th>Nom</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var product in Model.Results)
                        {
                            <tr>
                                <td>@product.Id</td>
                                <td>@product.Name</td>
                                <td>@product.Description</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(Model.AttackType) && string.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div class="alert alert-info mt-3">
            <i class="fas fa-info-circle"></i> Aucun résultat retourné par la requête.
        </div>
    }

    <!-- Conseils de sécurité -->
    <div class="mt-4">
        <div class="card border-info">
            <div class="card-header bg-info text-white">
                <h6><i class="fas fa-shield-alt"></i> Conseils de prévention</h6>
            </div>
            <div class="card-body">
                <ul class="mb-0">
                    <li><strong>Requêtes préparées :</strong> Utilisez des paramètres et non la concaténation</li>
                    <li><strong>Validation stricte :</strong> Validez tous les inputs côté serveur</li>
                    <li><strong>Principe du moindre privilège :</strong> Limitez les permissions de la base</li>
                    <li><strong>Échappement :</strong> Échappez les caractères spéciaux SQL</li>
                    <li><strong>ORM sécurisé :</strong> Utilisez Entity Framework avec LINQ</li>
                </ul>
            </div>
        </div>
    </div>

    <!-- Historique des tests -->
    <div class="mt-4">
        <h6><i class="fas fa-history"></i> Historique des tests</h6>
        <div id="testHistory" class="alert alert-light" style="max-height: 200px; overflow-y: auto;">
            <p class="text-muted">Aucun test effectué dans cette session.</p>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Données JSON sécurisées -->
    <script type="application/json" id="attackInfosData">
        @Json.Serialize(Model.AttackInfos)
    </script>

    <!-- Données pour le JavaScript -->
    <script>
        window.sqlInjectionData = {
            hasResults: @Json.Serialize(Model.Results?.Any() == true),
            hasError: @Json.Serialize(!string.IsNullOrEmpty(Model.ErrorMessage)),
            attackType: @Json.Serialize(Model.AttackType ?? ""),
            payload: @Json.Serialize(Model.Payload ?? ""),
            results: @Json.Serialize(Model.Results ?? new List<Product>())
        };
    </script>

    <!-- Scripts externes -->
    <script src="~/js/vulnerability-common.js"></script>
    <script src="~/js/sql-injection.js"></script>
}