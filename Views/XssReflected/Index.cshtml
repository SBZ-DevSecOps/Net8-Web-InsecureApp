@using InsecureAppWebNet8.ViewModels
@using InsecureAppWebNet8.Controllers
@model VulnerabilityViewModel<XssReflectedResult>

@{
    ViewData["Title"] = "XSS Reflected Vulnerabilities";
    var userInput = "";
}

<div class="container mt-4">
    <!-- Avertissement de sécurité -->
    <div class="alert alert-danger" role="alert">
        <i class="fas fa-exclamation-triangle"></i>
        <strong>DANGER :</strong> Ce module contient de vraies vulnérabilités XSS Reflected détectables par les outils SAST.
        Les payloads sont reflétés directement dans la réponse HTTP !
    </div>

    <h2>XSS Reflected Vulnerabilities</h2>
    <p class="text-muted">Injection de scripts via paramètres reflétés sans échappement</p>

    <!-- État du système -->
    <div class="alert alert-warning">
        <i class="fas fa-code"></i> <strong>Vulnérabilités actives :</strong>
        Paramètres URL | Messages d'erreur | Formulaires | Headers HTTP | Cookies | JSONP
    </div>

    <!-- Formulaire principal -->
    <form asp-controller="XssReflected" asp-action="Index" method="post" class="mb-4">
        <div class="row">
            <div class="col-md-6">
                <div class="form-group mb-3">
                    <label for="attackType" class="form-label">Type de XSS Reflected</label>
                    <select id="attackType" name="attackType" class="form-control">
                        <option value="">-- Sélectionnez un type --</option>
                        @foreach (var attackInfo in Model.AttackInfos)
                        {
                            var selected = Model.AttackType == attackInfo.Key ? "selected" : "";
                            <option value="@attackInfo.Key"
                                    selected="@selected">
                                @attackInfo.Key.ToUpper() - @attackInfo.Value.RiskLevel
                            </option>
                        }
                    </select>
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group mb-3">
                    <label for="payload" class="form-label">Payload XSS</label>
                    <input type="text" id="payload" name="payload" class="form-control font-monospace"
                           value="@Model.Payload" placeholder="<script>alert('XSS')</script>">
                </div>
                <button type="submit" class="btn btn-danger">
                    <i class="fas fa-bug"></i> Tester XSS Reflected
                </button>
            </div>
        </div>
    </form>

    <!-- Payloads prédéfinis -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-warning">
                <div class="card-header bg-warning text-dark">
                    <h6><i class="fas fa-bomb"></i> Payloads XSS Reflected</h6>
                </div>
                <div class="card-body" style="background-color: white !important;">
                    <div class="row">
                        <div class="col-md-3">
                            <h6 style="color: #212529 !important;">Basiques :</h6>
                            <button class="btn btn-sm btn-outline-danger mb-2 w-100" onclick="setPayload('<script>alert(&#34;XSS&#34;)</script>')">Script Tag</button>
                            <button class="btn btn-sm btn-outline-danger mb-2 w-100" onclick="setPayload('<img src=x onerror=alert(&#34;XSS&#34;)>')">IMG OnError</button>
                            <button class="btn btn-sm btn-outline-danger mb-2 w-100" onclick="setPayload('<svg onload=alert(&#34;XSS&#34;)>')">SVG OnLoad</button>
                        </div>
                        <div class="col-md-3">
                            <h6 style="color: #212529 !important;">Contournement :</h6>
                            <button class="btn btn-sm btn-outline-warning mb-2 w-100" onclick="setPayload('&#34;><script>alert(1)</script>')">Quote Break</button>
                            <button class="btn btn-sm btn-outline-warning mb-2 w-100" onclick="setPayload('javascript:alert(&#34;XSS&#34;)')">JavaScript URI</button>
                            <button class="btn btn-sm btn-outline-warning mb-2 w-100" onclick="setPayload('<iframe src=&#34;javascript:alert(1)&#34;>')">Iframe JS</button>
                        </div>
                        <div class="col-md-3">
                            <h6 style="color: #212529 !important;">Événements :</h6>
                            <button class="btn btn-sm btn-outline-info mb-2 w-100" onclick="setPayload('<details open ontoggle=alert(1)>')">Details</button>
                            <button class="btn btn-sm btn-outline-info mb-2 w-100" onclick="setPayload('<marquee onstart=alert(1)>')">Marquee</button>
                            <button class="btn btn-sm btn-outline-info mb-2 w-100" onclick="setPayload('<body onload=alert(1)>')">Body OnLoad</button>
                        </div>
                        <div class="col-md-3">
                            <h6 style="color: #212529 !important;">Data URI :</h6>
                            <button class="btn btn-sm btn-outline-dark mb-2 w-100" onclick="setPayload('data:text/html,<script>alert(1)</script>')">HTML Data</button>
                            <button class="btn btn-sm btn-outline-dark mb-2 w-100" onclick="setPayload('data:image/svg+xml,<svg onload=alert(1)>')">SVG Data</button>
                            <button class="btn btn-sm btn-outline-dark mb-2 w-100" onclick="setPayload('vbscript:msgbox(&#34;XSS&#34;)')">VBScript</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Zones de test XSS Reflected -->
    <div class="alert alert-info">
        <h5><i class="fas fa-flask"></i> Tests XSS Reflected Directs</h5>
        <div class="row">
            <div class="col-md-6 mb-3">
                <div class="card border-danger">
                    <div class="card-header bg-danger text-white">Test Recherche</div>
                    <div class="card-body" style="background-color: white !important;">
                        <input type="text" id="searchInput" class="form-control mb-2" 
                               placeholder="<script>alert('Search-XSS')</script>" />
                        <button class="btn btn-danger btn-sm" onclick="testSearch()">Rechercher</button>
                        <div id="searchResults" class="mt-2 p-2 border rounded"></div>
                    </div>
                </div>
            </div>
            <div class="col-md-6 mb-3">
                <div class="card border-warning">
                    <div class="card-header bg-warning text-dark">Test Erreur</div>
                    <div class="card-body" style="background-color: white !important;">
                        <input type="text" id="errorInput" class="form-control mb-2" 
                               placeholder="<img src=x onerror=alert('Error-XSS')>" />
                        <button class="btn btn-warning btn-sm" onclick="testError()">Générer Erreur</button>
                        <div id="errorResults" class="mt-2 p-2 border rounded"></div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="row">
            <div class="col-md-6 mb-3">
                <div class="card border-info">
                    <div class="card-header bg-info text-white">Test Formulaire</div>
                    <div class="card-body" style="background-color: white !important;">
                        <input type="text" id="nameInput" class="form-control mb-2" 
                               placeholder="<svg onload=alert('Form-XSS')>" />
                        <button class="btn btn-info btn-sm" onclick="testForm()">Soumettre</button>
                        <div id="formResults" class="mt-2 p-2 border rounded"></div>
                    </div>
                </div>
            </div>
            <div class="col-md-6 mb-3">
                <div class="card border-success">
                    <div class="card-header bg-success text-white">Test Cookie</div>
                    <div class="card-body" style="background-color: white !important;">
                        <input type="text" id="cookieInput" class="form-control mb-2" 
                               placeholder="<script>alert('Cookie-XSS')</script>" />
                        <button class="btn btn-success btn-sm" onclick="testCookie()">Définir Cookie</button>
                        <div id="cookieResults" class="mt-2 p-2 border rounded"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Résultats des tests -->
    @if (Model.Results?.Any() == true)
    {
        <div class="alert alert-success">
            <h5><i class="fas fa-check-circle"></i> Résultats des Tests XSS</h5>
            @foreach (var result in Model.Results)
            {
                <div class="card mb-3 border-success">
                    <div class="card-header bg-success text-white">
                        <strong>@result.AttackType.ToUpper()</strong> - @(result.Success ? "VULNÉRABLE" : "ÉCHEC")
                    </div>
                    <div class="card-body" style="background-color: white !important;">
                        <p style="color: #212529 !important;"><strong>Message :</strong> @result.Message</p>
                        <p style="color: #212529 !important;"><strong>Paramètre vulnérable :</strong> <code>@result.VulnerableParameter</code></p>
                        <p style="color: #212529 !important;"><strong>Contenu reflété :</strong></p>
                        <div class="bg-light p-2 rounded border">
                            @Html.Raw(result.ReflectedContent)
                        </div>
                        <p style="color: #212529 !important;" class="mt-2">
                            <strong>URL de test :</strong> 
                            <a href="@result.TestUrl" target="_blank" class="btn btn-sm btn-outline-primary">
                                <i class="fas fa-external-link-alt"></i> Tester
                            </a>
                        </p>
                    </div>
                </div>
            }
        </div>
    }

    <!-- Description de l'attaque -->
    @if (!string.IsNullOrEmpty(Model.AttackType) && Model.AttackInfos.ContainsKey(Model.AttackType))
    {
        var attackInfo = Model.AttackInfos[Model.AttackType];
        var alertClass = attackInfo.RiskLevel.ToLower() switch
        {
            "critical" => "alert-danger",
            "high" => "alert-danger", 
            "medium" => "alert-warning",
            _ => "alert-info"
        };

        <div class="@alertClass">
            <div class="d-flex align-items-start">
                <div class="me-3">
                    @if (attackInfo.RiskLevel == "Critical" || attackInfo.RiskLevel == "High")
                    {
                        <i class="fas fa-skull-crossbones text-danger fa-2x"></i>
                    }
                    else if (attackInfo.RiskLevel == "Medium")
                    {
                        <i class="fas fa-exclamation-triangle text-warning fa-2x"></i>
                    }
                    else
                    {
                        <i class="fas fa-info-circle text-info fa-2x"></i>
                    }
                </div>
                <div class="flex-grow-1">
                    <h5>@Model.AttackType.ToUpper() - @attackInfo.RiskLevel Risk</h5>
                    <p class="mb-2">@attackInfo.Description</p>
                    <div class="d-flex gap-2">
                        <a href="@attackInfo.LearnMoreUrl" target="_blank" class="btn btn-sm btn-outline-primary">
                            <i class="fas fa-external-link-alt"></i> En savoir plus
                        </a>
                        <span class="badge bg-@(attackInfo.RiskLevel.ToLower() == "critical" || attackInfo.RiskLevel.ToLower() == "high" ? "danger" : attackInfo.RiskLevel.ToLower() == "medium" ? "warning" : "info")">
                            Risque : @attackInfo.RiskLevel
                        </span>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Endpoints de test -->
    <div class="card border-secondary mt-4">
        <div class="card-header bg-secondary text-white">
            <h6><i class="fas fa-link"></i> Endpoints de Test XSS Reflected</h6>
        </div>
        <div class="card-body" style="background-color: white !important;">
            <div class="row">
                <div class="col-md-6">
                    <h6 style="color: #212529 !important;">Endpoints vulnérables :</h6>
                    <ul style="color: #212529 !important;">
                        <li><code>/XssReflected/Search?q=PAYLOAD</code></li>
                        <li><code>/XssReflected/Error?message=PAYLOAD</code></li>
                        <li><code>/XssReflected/Profile?username=PAYLOAD</code></li>
                        <li><code>/XssReflected/Debug</code> (headers)</li>
                        <li><code>/XssReflected/Api?callback=PAYLOAD</code></li>
                    </ul>
                </div>
                <div class="col-md-6">
                    <h6 style="color: #212529 !important;">Tests directs :</h6>
                    <div class="d-grid gap-2">
                        <a href="/XssReflected/Search?q=<script>alert('Search')</script>" target="_blank" class="btn btn-sm btn-outline-danger">Test Recherche</a>
                        <a href="/XssReflected/Error?message=<img src=x onerror=alert('Error')>" target="_blank" class="btn btn-sm btn-outline-warning">Test Erreur</a>
                        <a href="/XssReflected/Debug" target="_blank" class="btn btn-sm btn-outline-info">Test Headers</a>
                        <a href="/XssReflected/TestEndpoints" target="_blank" class="btn btn-sm btn-outline-secondary">Voir tous les endpoints</a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Patterns SAST -->
    <div class="card border-secondary mt-4">
        <div class="card-header bg-dark text-white">
            <h6><i class="fas fa-search"></i> Patterns XSS Reflected détectables par SAST</h6>
        </div>
        <div class="card-body" style="background-color: white !important;">
            <div class="row">
                <div class="col-md-6">
                    <h6 style="color: #212529 !important;">ViewBag vulnérable :</h6>
                    <pre style="background-color: #f8f9fa !important; color: #212529 !important; border: 1px solid #dee2e6 !important;"><code style="color: #212529 !important;">// VULNÉRABLE
ViewBag.SearchQuery = Request.Query["q"];
@ViewBag.SearchQuery // Non échappé

// VULNÉRABLE  
@Html.Raw(userInput)</code></pre>

                    <h6 style="color: #212529 !important;">Paramètres URL non validés :</h6>
                    <pre style="background-color: #f8f9fa !important; color: #212529 !important; border: 1px solid #dee2e6 !important;"><code style="color: #212529 !important;">// VULNÉRABLE
var message = Request.Query["msg"];
return View(message); // Direct</code></pre>
                </div>
                <div class="col-md-6">
                    <h6 style="color: #212529 !important;">Headers reflétés :</h6>
                    <pre style="background-color: #f8f9fa !important; color: #212529 !important; border: 1px solid #dee2e6 !important;"><code style="color: #212529 !important;">// VULNÉRABLE
ViewBag.UserAgent = Request.Headers["User-Agent"];
ViewBag.Referer = Request.Headers["Referer"];</code></pre>

                    <h6 style="color: #212529 !important;">Formulaires non échappés :</h6>
                    <pre style="background-color: #f8f9fa !important; color: #212529 !important; border: 1px solid #dee2e6 !important;"><code style="color: #212529 !important;">// VULNÉRABLE
ViewBag.Name = Request.Form["name"];
ViewBag.Email = Request.Form["email"];</code></pre>
                </div>
            </div>

            <div class="mt-3">
                <strong style="color: #212529 !important;">Outils de détection XSS Reflected :</strong>
                <span class="badge bg-danger">Snyk</span>
                <span class="badge bg-warning text-dark">SonarQube</span>
                <span class="badge bg-info">Semgrep</span>
                <span class="badge bg-success">ESLint Security</span>
                <span class="badge bg-secondary">Burp Suite</span>
                <span class="badge bg-primary">CodeQL</span>
                <span class="badge bg-dark text-light">Checkmarx</span>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .card-body { background-color: white !important; color: #212529 !important; }
        .card-body h6, .card-body p, .card-body strong, .card-body li { color: #212529 !important; }
        pre, code { background-color: #f8f9fa !important; color: #212529 !important; }
        .text-muted { color: #6c757d !important; }
    </style>
}

@section Scripts {
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    
    <script>
        // Fonctions de test XSS Reflected
        function setPayload(payload) {
            var input = document.getElementById('payload');
            if (input) {
                input.value = payload;
                alert('Payload XSS Reflected défini: ' + payload.substring(0, 50));
            }
        }

        function testSearch() {
            var input = document.getElementById('searchInput');
            var results = document.getElementById('searchResults');
            if (input && results) {
                var payload = input.value || input.placeholder;
                // Simuler une requête de recherche vulnérable
                var url = '/XssReflected/Search?q=' + encodeURIComponent(payload);
                results.innerHTML = '<p><strong>Test lancé:</strong></p><p>URL: <a href="' + url + '" target="_blank">' + url + '</a></p><p><strong>Résultat simulé:</strong> Recherche pour: ' + payload + '</p>';
                alert('Test de recherche XSS lancé!');
            }
        }

        function testError() {
            var input = document.getElementById('errorInput');
            var results = document.getElementById('errorResults');
            if (input && results) {
                var payload = input.value || input.placeholder;
                var url = '/XssReflected/Error?message=' + encodeURIComponent(payload);
                results.innerHTML = '<p><strong>Test lancé:</strong></p><p>URL: <a href="' + url + '" target="_blank">' + url + '</a></p><p><strong>Erreur simulée:</strong> ' + payload + '</p>';
                alert('Test d\'erreur XSS lancé!');
            }
        }

        function testForm() {
            var input = document.getElementById('nameInput');
            var results = document.getElementById('formResults');
            if (input && results) {
                var payload = input.value || input.placeholder;
                results.innerHTML = '<p><strong>Formulaire soumis:</strong></p><p><strong>Nom reflété:</strong> ' + payload + '</p><p>Ce contenu sera envoyé au serveur et reflété dans la réponse.</p>';
                alert('Test de formulaire XSS lancé!');
            }
        }

        function testCookie() {
            var input = document.getElementById('cookieInput');
            var results = document.getElementById('cookieResults');
            if (input && results) {
                var payload = input.value || input.placeholder;
                var url = '/XssReflected/CookieTest?action=set&value=' + encodeURIComponent(payload);
                results.innerHTML = '<p><strong>Cookie défini:</strong></p><p>URL: <a href="' + url + '" target="_blank">' + url + '</a></p><p><strong>Valeur:</strong> ' + payload + '</p>';
                alert('Test de cookie XSS lancé!');
            }
        }

        // Initialisation
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Module XSS Reflected chargé - VULNÉRABLE');
        });
    </script>
}